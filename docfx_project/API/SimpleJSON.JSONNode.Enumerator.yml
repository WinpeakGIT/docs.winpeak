### YamlMime:ManagedReference
items:
- uid: SimpleJSON.JSONNode.Enumerator
  commentId: T:SimpleJSON.JSONNode.Enumerator
  id: JSONNode.Enumerator
  parent: SimpleJSON
  children:
  - SimpleJSON.JSONNode.Enumerator.#ctor(System.Collections.Generic.Dictionary{System.String,SimpleJSON.JSONNode}.Enumerator)
  - SimpleJSON.JSONNode.Enumerator.#ctor(System.Collections.Generic.List{SimpleJSON.JSONNode}.Enumerator)
  - SimpleJSON.JSONNode.Enumerator.Current
  - SimpleJSON.JSONNode.Enumerator.IsValid
  - SimpleJSON.JSONNode.Enumerator.MoveNext
  langs:
  - csharp
  - vb
  name: JSONNode.Enumerator
  nameWithType: JSONNode.Enumerator
  fullName: SimpleJSON.JSONNode.Enumerator
  type: Struct
  source:
    id: Enumerator
    path: ''
    startLine: 169985
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public struct Enumerator
    content.vb: Public Structure Enumerator
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: SimpleJSON.JSONNode.Enumerator.IsValid
  commentId: P:SimpleJSON.JSONNode.Enumerator.IsValid
  id: IsValid
  parent: SimpleJSON.JSONNode.Enumerator
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: JSONNode.Enumerator.IsValid
  fullName: SimpleJSON.JSONNode.Enumerator.IsValid
  type: Property
  source:
    id: IsValid
    path: ''
    startLine: 169991
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public readonly bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: SimpleJSON.JSONNode.Enumerator.IsValid*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SimpleJSON.JSONNode.Enumerator.#ctor(System.Collections.Generic.List{SimpleJSON.JSONNode}.Enumerator)
  commentId: M:SimpleJSON.JSONNode.Enumerator.#ctor(System.Collections.Generic.List{SimpleJSON.JSONNode}.Enumerator)
  id: '#ctor(System.Collections.Generic.List{SimpleJSON.JSONNode}.Enumerator)'
  parent: SimpleJSON.JSONNode.Enumerator
  langs:
  - csharp
  - vb
  name: Enumerator(List<JSONNode>.Enumerator)
  nameWithType: JSONNode.Enumerator.Enumerator(List<JSONNode>.Enumerator)
  fullName: SimpleJSON.JSONNode.Enumerator.Enumerator(System.Collections.Generic.List<SimpleJSON.JSONNode>.Enumerator)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 169992
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public Enumerator(List<JSONNode>.Enumerator aArrayEnum)
    parameters:
    - id: aArrayEnum
      type: System.Collections.Generic.List{SimpleJSON.JSONNode}.Enumerator
    content.vb: Public Sub New(aArrayEnum As List(Of JSONNode).Enumerator)
  overload: SimpleJSON.JSONNode.Enumerator.#ctor*
  nameWithType.vb: JSONNode.Enumerator.Enumerator(List(Of JSONNode).Enumerator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SimpleJSON.JSONNode.Enumerator.Enumerator(System.Collections.Generic.List(Of SimpleJSON.JSONNode).Enumerator)
  name.vb: Enumerator(List(Of JSONNode).Enumerator)
- uid: SimpleJSON.JSONNode.Enumerator.#ctor(System.Collections.Generic.Dictionary{System.String,SimpleJSON.JSONNode}.Enumerator)
  commentId: M:SimpleJSON.JSONNode.Enumerator.#ctor(System.Collections.Generic.Dictionary{System.String,SimpleJSON.JSONNode}.Enumerator)
  id: '#ctor(System.Collections.Generic.Dictionary{System.String,SimpleJSON.JSONNode}.Enumerator)'
  parent: SimpleJSON.JSONNode.Enumerator
  langs:
  - csharp
  - vb
  name: Enumerator(Dictionary<String, JSONNode>.Enumerator)
  nameWithType: JSONNode.Enumerator.Enumerator(Dictionary<String, JSONNode>.Enumerator)
  fullName: SimpleJSON.JSONNode.Enumerator.Enumerator(System.Collections.Generic.Dictionary<System.String, SimpleJSON.JSONNode>.Enumerator)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 169998
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public Enumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
    parameters:
    - id: aDictEnum
      type: System.Collections.Generic.Dictionary{System.String,SimpleJSON.JSONNode}.Enumerator
    content.vb: Public Sub New(aDictEnum As Dictionary(Of String, JSONNode).Enumerator)
  overload: SimpleJSON.JSONNode.Enumerator.#ctor*
  nameWithType.vb: JSONNode.Enumerator.Enumerator(Dictionary(Of String, JSONNode).Enumerator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SimpleJSON.JSONNode.Enumerator.Enumerator(System.Collections.Generic.Dictionary(Of System.String, SimpleJSON.JSONNode).Enumerator)
  name.vb: Enumerator(Dictionary(Of String, JSONNode).Enumerator)
- uid: SimpleJSON.JSONNode.Enumerator.Current
  commentId: P:SimpleJSON.JSONNode.Enumerator.Current
  id: Current
  parent: SimpleJSON.JSONNode.Enumerator
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: JSONNode.Enumerator.Current
  fullName: SimpleJSON.JSONNode.Enumerator.Current
  type: Property
  source:
    id: Current
    path: ''
    startLine: 170004
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public readonly KeyValuePair<string, JSONNode> Current { get; }
    parameters: []
    return:
      type: System.Collections.Generic.KeyValuePair{System.String,SimpleJSON.JSONNode}
    content.vb: Public ReadOnly Property Current As KeyValuePair(Of String, JSONNode)
  overload: SimpleJSON.JSONNode.Enumerator.Current*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SimpleJSON.JSONNode.Enumerator.MoveNext
  commentId: M:SimpleJSON.JSONNode.Enumerator.MoveNext
  id: MoveNext
  parent: SimpleJSON.JSONNode.Enumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: JSONNode.Enumerator.MoveNext()
  fullName: SimpleJSON.JSONNode.Enumerator.MoveNext()
  type: Method
  source:
    id: MoveNext
    path: ''
    startLine: 170015
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
    content.vb: Public Function MoveNext As Boolean
  overload: SimpleJSON.JSONNode.Enumerator.MoveNext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SimpleJSON
  commentId: N:SimpleJSON
  name: SimpleJSON
  nameWithType: SimpleJSON
  fullName: SimpleJSON
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SimpleJSON.JSONNode.Enumerator.IsValid*
  commentId: Overload:SimpleJSON.JSONNode.Enumerator.IsValid
  name: IsValid
  nameWithType: JSONNode.Enumerator.IsValid
  fullName: SimpleJSON.JSONNode.Enumerator.IsValid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SimpleJSON.JSONNode.Enumerator.#ctor*
  commentId: Overload:SimpleJSON.JSONNode.Enumerator.#ctor
  name: Enumerator
  nameWithType: JSONNode.Enumerator.Enumerator
  fullName: SimpleJSON.JSONNode.Enumerator.Enumerator
- uid: System.Collections.Generic.List{SimpleJSON.JSONNode}.Enumerator
  commentId: T:System.Collections.Generic.List{SimpleJSON.JSONNode}.Enumerator
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1.Enumerator
  name: List.Enumerator<>
  nameWithType: List.Enumerator<>
  fullName: System.Collections.Generic.List.Enumerator<>
  nameWithType.vb: List.Enumerator(Of )
  fullName.vb: System.Collections.Generic.List.Enumerator(Of )
  name.vb: List.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    nameWithType: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    nameWithType: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Enumerator
  commentId: T:System.Collections.Generic.List`1.Enumerator
  isExternal: true
  name: List.Enumerator<>
  nameWithType: List.Enumerator<>
  fullName: System.Collections.Generic.List.Enumerator<>
  nameWithType.vb: List.Enumerator(Of )
  fullName.vb: System.Collections.Generic.List.Enumerator(Of )
  name.vb: List.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    nameWithType: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    nameWithType: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.String,SimpleJSON.JSONNode}.Enumerator
  commentId: T:System.Collections.Generic.Dictionary{System.String,SimpleJSON.JSONNode}.Enumerator
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2.Enumerator
  name: Dictionary.Enumerator<>
  nameWithType: Dictionary.Enumerator<>
  fullName: System.Collections.Generic.Dictionary.Enumerator<>
  nameWithType.vb: Dictionary.Enumerator(Of )
  fullName.vb: System.Collections.Generic.Dictionary.Enumerator(Of )
  name.vb: Dictionary.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Enumerator
    name: Dictionary.Enumerator
    nameWithType: Dictionary.Enumerator
    fullName: System.Collections.Generic.Dictionary.Enumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Enumerator
    name: Dictionary.Enumerator
    nameWithType: Dictionary.Enumerator
    fullName: System.Collections.Generic.Dictionary.Enumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.Enumerator
  commentId: T:System.Collections.Generic.Dictionary`2.Enumerator
  isExternal: true
  name: Dictionary.Enumerator<>
  nameWithType: Dictionary.Enumerator<>
  fullName: System.Collections.Generic.Dictionary.Enumerator<>
  nameWithType.vb: Dictionary.Enumerator(Of )
  fullName.vb: System.Collections.Generic.Dictionary.Enumerator(Of )
  name.vb: Dictionary.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Enumerator
    name: Dictionary.Enumerator
    nameWithType: Dictionary.Enumerator
    fullName: System.Collections.Generic.Dictionary.Enumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Enumerator
    name: Dictionary.Enumerator
    nameWithType: Dictionary.Enumerator
    fullName: System.Collections.Generic.Dictionary.Enumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: SimpleJSON.JSONNode.Enumerator.Current*
  commentId: Overload:SimpleJSON.JSONNode.Enumerator.Current
  name: Current
  nameWithType: JSONNode.Enumerator.Current
  fullName: SimpleJSON.JSONNode.Enumerator.Current
- uid: System.Collections.Generic.KeyValuePair{System.String,SimpleJSON.JSONNode}
  commentId: T:System.Collections.Generic.KeyValuePair{System.String,SimpleJSON.JSONNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, JSONNode>
  nameWithType: KeyValuePair<String, JSONNode>
  fullName: System.Collections.Generic.KeyValuePair<System.String, SimpleJSON.JSONNode>
  nameWithType.vb: KeyValuePair(Of String, JSONNode)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, SimpleJSON.JSONNode)
  name.vb: KeyValuePair(Of String, JSONNode)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: SimpleJSON.JSONNode.Enumerator.MoveNext*
  commentId: Overload:SimpleJSON.JSONNode.Enumerator.MoveNext
  name: MoveNext
  nameWithType: JSONNode.Enumerator.MoveNext
  fullName: SimpleJSON.JSONNode.Enumerator.MoveNext
