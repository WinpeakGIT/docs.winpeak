### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Security.SecureRandom
  commentId: T:Org.BouncyCastle.Security.SecureRandom
  id: SecureRandom
  parent: Org.BouncyCastle.Security
  children:
  - Org.BouncyCastle.Security.SecureRandom.#ctor
  - Org.BouncyCastle.Security.SecureRandom.#ctor(IRandomGenerator)
  - Org.BouncyCastle.Security.SecureRandom.#ctor(System.Byte[])
  - Org.BouncyCastle.Security.SecureRandom.GenerateSeed(System.Int32)
  - Org.BouncyCastle.Security.SecureRandom.generator
  - Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String)
  - Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String,System.Boolean)
  - Org.BouncyCastle.Security.SecureRandom.GetNextBytes(Org.BouncyCastle.Security.SecureRandom,System.Int32)
  - Org.BouncyCastle.Security.SecureRandom.GetSeed(System.Int32)
  - Org.BouncyCastle.Security.SecureRandom.Next
  - Org.BouncyCastle.Security.SecureRandom.Next(System.Int32)
  - Org.BouncyCastle.Security.SecureRandom.Next(System.Int32,System.Int32)
  - Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[])
  - Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[],System.Int32,System.Int32)
  - Org.BouncyCastle.Security.SecureRandom.NextDouble
  - Org.BouncyCastle.Security.SecureRandom.NextInt
  - Org.BouncyCastle.Security.SecureRandom.NextLong
  - Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Byte[])
  - Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Int64)
  langs:
  - csharp
  - vb
  name: SecureRandom
  nameWithType: SecureRandom
  fullName: Org.BouncyCastle.Security.SecureRandom
  type: Class
  source:
    id: SecureRandom
    path: ''
    startLine: 31777
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: 'public class SecureRandom : Random'
    content.vb: >-
      Public Class SecureRandom
          Inherits Random
  inheritance:
  - System.Object
  - System.Random
  inheritedMembers:
  - System.Random.Sample
  - System.Random.NextBytes(System.Span{System.Byte})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Org.BouncyCastle.Security.SecureRandom.GetNextBytes(Org.BouncyCastle.Security.SecureRandom,System.Int32)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.GetNextBytes(Org.BouncyCastle.Security.SecureRandom,System.Int32)
  id: GetNextBytes(Org.BouncyCastle.Security.SecureRandom,System.Int32)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: GetNextBytes(SecureRandom, Int32)
  nameWithType: SecureRandom.GetNextBytes(SecureRandom, Int32)
  fullName: Org.BouncyCastle.Security.SecureRandom.GetNextBytes(Org.BouncyCastle.Security.SecureRandom, System.Int32)
  type: Method
  source:
    id: GetNextBytes
    path: ''
    startLine: 31842
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public static byte[] GetNextBytes(SecureRandom secureRandom, int length)
    parameters:
    - id: secureRandom
      type: Org.BouncyCastle.Security.SecureRandom
    - id: length
      type: System.Int32
    return:
      type: System.Byte[]
    content.vb: Public Shared Function GetNextBytes(secureRandom As SecureRandom, length As Integer) As Byte()
  overload: Org.BouncyCastle.Security.SecureRandom.GetNextBytes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String)
  id: GetInstance(System.String)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: GetInstance(String)
  nameWithType: SecureRandom.GetInstance(String)
  fullName: Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String)
  type: Method
  source:
    id: GetInstance
    path: ''
    startLine: 31854
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  summary: "\nCreate and auto-seed an instance based on the given algorithm.\n"
  remarks: Equivalent to GetInstance(algorithm, true)
  example: []
  syntax:
    content: public static SecureRandom GetInstance(string algorithm)
    parameters:
    - id: algorithm
      type: System.String
      description: e.g. &quot;SHA256PRNG&quot;
    return:
      type: Org.BouncyCastle.Security.SecureRandom
    content.vb: Public Shared Function GetInstance(algorithm As String) As SecureRandom
  overload: Org.BouncyCastle.Security.SecureRandom.GetInstance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String,System.Boolean)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String,System.Boolean)
  id: GetInstance(System.String,System.Boolean)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: GetInstance(String, Boolean)
  nameWithType: SecureRandom.GetInstance(String, Boolean)
  fullName: Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String, System.Boolean)
  type: Method
  source:
    id: GetInstance
    path: ''
    startLine: 31864
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  summary: "\nCreate an instance based on the given algorithm, with optional auto-seeding\n"
  example: []
  syntax:
    content: public static SecureRandom GetInstance(string algorithm, bool autoSeed)
    parameters:
    - id: algorithm
      type: System.String
      description: e.g. &quot;SHA256PRNG&quot;
    - id: autoSeed
      type: System.Boolean
      description: If true, the instance will be auto-seeded.
    return:
      type: Org.BouncyCastle.Security.SecureRandom
    content.vb: Public Shared Function GetInstance(algorithm As String, autoSeed As Boolean) As SecureRandom
  overload: Org.BouncyCastle.Security.SecureRandom.GetInstance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Security.SecureRandom.GetSeed(System.Int32)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.GetSeed(System.Int32)
  id: GetSeed(System.Int32)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: GetSeed(Int32)
  nameWithType: SecureRandom.GetSeed(Int32)
  fullName: Org.BouncyCastle.Security.SecureRandom.GetSeed(System.Int32)
  type: Method
  source:
    id: GetSeed
    path: ''
    startLine: 31880
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: >-
      [Obsolete("Call GenerateSeed() on a SecureRandom instance instead")]

      public static byte[] GetSeed(int length)
    parameters:
    - id: length
      type: System.Int32
    return:
      type: System.Byte[]
    content.vb: >-
      <Obsolete("Call GenerateSeed() on a SecureRandom instance instead")>

      Public Shared Function GetSeed(length As Integer) As Byte()
  overload: Org.BouncyCastle.Security.SecureRandom.GetSeed*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Call GenerateSeed() on a SecureRandom instance instead
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Security.SecureRandom.generator
  commentId: F:Org.BouncyCastle.Security.SecureRandom.generator
  id: generator
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: generator
  nameWithType: SecureRandom.generator
  fullName: Org.BouncyCastle.Security.SecureRandom.generator
  type: Field
  source:
    id: generator
    path: ''
    startLine: 31886
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: protected readonly IRandomGenerator generator
    return:
      type: IRandomGenerator
    content.vb: Protected ReadOnly generator As IRandomGenerator
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Org.BouncyCastle.Security.SecureRandom.#ctor
  commentId: M:Org.BouncyCastle.Security.SecureRandom.#ctor
  id: '#ctor'
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: SecureRandom()
  nameWithType: SecureRandom.SecureRandom()
  fullName: Org.BouncyCastle.Security.SecureRandom.SecureRandom()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 31888
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public SecureRandom()
    content.vb: Public Sub New
  overload: Org.BouncyCastle.Security.SecureRandom.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Org.BouncyCastle.Security.SecureRandom.#ctor(System.Byte[])
  commentId: M:Org.BouncyCastle.Security.SecureRandom.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: SecureRandom(Byte[])
  nameWithType: SecureRandom.SecureRandom(Byte[])
  fullName: Org.BouncyCastle.Security.SecureRandom.SecureRandom(System.Byte[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 31896
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  remarks: "\nTo replicate existing predictable output, replace with GetInstance(&quot;SHA1PRNG&quot;, false), followed by SetSeed(seed)\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetInstance/SetSeed instead")]

      public SecureRandom(byte[] seed)
    parameters:
    - id: seed
      type: System.Byte[]
    content.vb: >-
      <Obsolete("Use GetInstance/SetSeed instead")>

      Public Sub New(seed As Byte())
  overload: Org.BouncyCastle.Security.SecureRandom.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetInstance/SetSeed instead
  nameWithType.vb: SecureRandom.SecureRandom(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Org.BouncyCastle.Security.SecureRandom.SecureRandom(System.Byte())
  name.vb: SecureRandom(Byte())
- uid: Org.BouncyCastle.Security.SecureRandom.#ctor(IRandomGenerator)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.#ctor(IRandomGenerator)
  id: '#ctor(IRandomGenerator)'
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: SecureRandom(IRandomGenerator)
  nameWithType: SecureRandom.SecureRandom(IRandomGenerator)
  fullName: Org.BouncyCastle.Security.SecureRandom.SecureRandom(IRandomGenerator)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 31911
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  summary: Use the specified instance of IRandomGenerator as random source.
  remarks: "\nThis constructor performs no seeding of either the <code>IRandomGenerator</code> or the\nconstructed <code>SecureRandom</code>. It is the responsibility of the client to provide\nproper seed material as necessary/appropriate for the given <code>IRandomGenerator</code>\nimplementation.\n"
  example: []
  syntax:
    content: public SecureRandom(IRandomGenerator generator)
    parameters:
    - id: generator
      type: IRandomGenerator
      description: The source to generate all random bytes from.
    content.vb: Public Sub New(generator As IRandomGenerator)
  overload: Org.BouncyCastle.Security.SecureRandom.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Org.BouncyCastle.Security.SecureRandom.GenerateSeed(System.Int32)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.GenerateSeed(System.Int32)
  id: GenerateSeed(System.Int32)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: GenerateSeed(Int32)
  nameWithType: SecureRandom.GenerateSeed(Int32)
  fullName: Org.BouncyCastle.Security.SecureRandom.GenerateSeed(System.Int32)
  type: Method
  source:
    id: GenerateSeed
    path: ''
    startLine: 31917
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public virtual byte[] GenerateSeed(int length)
    parameters:
    - id: length
      type: System.Int32
    return:
      type: System.Byte[]
    content.vb: Public Overridable Function GenerateSeed(length As Integer) As Byte()
  overload: Org.BouncyCastle.Security.SecureRandom.GenerateSeed*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Byte[])
  commentId: M:Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Byte[])
  id: SetSeed(System.Byte[])
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: SetSeed(Byte[])
  nameWithType: SecureRandom.SetSeed(Byte[])
  fullName: Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Byte[])
  type: Method
  source:
    id: SetSeed
    path: ''
    startLine: 31922
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public virtual void SetSeed(byte[] seed)
    parameters:
    - id: seed
      type: System.Byte[]
    content.vb: Public Overridable Sub SetSeed(seed As Byte())
  overload: Org.BouncyCastle.Security.SecureRandom.SetSeed*
  nameWithType.vb: SecureRandom.SetSeed(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Byte())
  name.vb: SetSeed(Byte())
- uid: Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Int64)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Int64)
  id: SetSeed(System.Int64)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: SetSeed(Int64)
  nameWithType: SecureRandom.SetSeed(Int64)
  fullName: Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Int64)
  type: Method
  source:
    id: SetSeed
    path: ''
    startLine: 31927
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public virtual void SetSeed(long seed)
    parameters:
    - id: seed
      type: System.Int64
    content.vb: Public Overridable Sub SetSeed(seed As Long)
  overload: Org.BouncyCastle.Security.SecureRandom.SetSeed*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Org.BouncyCastle.Security.SecureRandom.Next
  commentId: M:Org.BouncyCastle.Security.SecureRandom.Next
  id: Next
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: Next()
  nameWithType: SecureRandom.Next()
  fullName: Org.BouncyCastle.Security.SecureRandom.Next()
  type: Method
  source:
    id: Next
    path: ''
    startLine: 31932
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public override int Next()
    return:
      type: System.Int32
    content.vb: Public Overrides Function Next As Integer
  overridden: System.Random.Next
  overload: Org.BouncyCastle.Security.SecureRandom.Next*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Org.BouncyCastle.Security.SecureRandom.Next(System.Int32)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.Next(System.Int32)
  id: Next(System.Int32)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: Next(Int32)
  nameWithType: SecureRandom.Next(Int32)
  fullName: Org.BouncyCastle.Security.SecureRandom.Next(System.Int32)
  type: Method
  source:
    id: Next
    path: ''
    startLine: 31937
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public override int Next(int maxValue)
    parameters:
    - id: maxValue
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Overrides Function Next(maxValue As Integer) As Integer
  overridden: System.Random.Next(System.Int32)
  overload: Org.BouncyCastle.Security.SecureRandom.Next*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Org.BouncyCastle.Security.SecureRandom.Next(System.Int32,System.Int32)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.Next(System.Int32,System.Int32)
  id: Next(System.Int32,System.Int32)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: Next(Int32, Int32)
  nameWithType: SecureRandom.Next(Int32, Int32)
  fullName: Org.BouncyCastle.Security.SecureRandom.Next(System.Int32, System.Int32)
  type: Method
  source:
    id: Next
    path: ''
    startLine: 31968
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public override int Next(int minValue, int maxValue)
    parameters:
    - id: minValue
      type: System.Int32
    - id: maxValue
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Overrides Function Next(minValue As Integer, maxValue As Integer) As Integer
  overridden: System.Random.Next(System.Int32,System.Int32)
  overload: Org.BouncyCastle.Security.SecureRandom.Next*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[])
  commentId: M:Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[])
  id: NextBytes(System.Byte[])
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: NextBytes(Byte[])
  nameWithType: SecureRandom.NextBytes(Byte[])
  fullName: Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[])
  type: Method
  source:
    id: NextBytes
    path: ''
    startLine: 31991
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public override void NextBytes(byte[] buf)
    parameters:
    - id: buf
      type: System.Byte[]
    content.vb: Public Overrides Sub NextBytes(buf As Byte())
  overridden: System.Random.NextBytes(System.Byte[])
  overload: Org.BouncyCastle.Security.SecureRandom.NextBytes*
  nameWithType.vb: SecureRandom.NextBytes(Byte())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte())
  name.vb: NextBytes(Byte())
- uid: Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[],System.Int32,System.Int32)
  commentId: M:Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[],System.Int32,System.Int32)
  id: NextBytes(System.Byte[],System.Int32,System.Int32)
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: NextBytes(Byte[], Int32, Int32)
  nameWithType: SecureRandom.NextBytes(Byte[], Int32, Int32)
  fullName: Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    id: NextBytes
    path: ''
    startLine: 31996
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public virtual void NextBytes(byte[] buf, int off, int len)
    parameters:
    - id: buf
      type: System.Byte[]
    - id: off
      type: System.Int32
    - id: len
      type: System.Int32
    content.vb: Public Overridable Sub NextBytes(buf As Byte(), off As Integer, len As Integer)
  overload: Org.BouncyCastle.Security.SecureRandom.NextBytes*
  nameWithType.vb: SecureRandom.NextBytes(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte(), System.Int32, System.Int32)
  name.vb: NextBytes(Byte(), Int32, Int32)
- uid: Org.BouncyCastle.Security.SecureRandom.NextDouble
  commentId: M:Org.BouncyCastle.Security.SecureRandom.NextDouble
  id: NextDouble
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: NextDouble()
  nameWithType: SecureRandom.NextDouble()
  fullName: Org.BouncyCastle.Security.SecureRandom.NextDouble()
  type: Method
  source:
    id: NextDouble
    path: ''
    startLine: 32003
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public override double NextDouble()
    return:
      type: System.Double
    content.vb: Public Overrides Function NextDouble As Double
  overridden: System.Random.NextDouble
  overload: Org.BouncyCastle.Security.SecureRandom.NextDouble*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Org.BouncyCastle.Security.SecureRandom.NextInt
  commentId: M:Org.BouncyCastle.Security.SecureRandom.NextInt
  id: NextInt
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: NextInt()
  nameWithType: SecureRandom.NextInt()
  fullName: Org.BouncyCastle.Security.SecureRandom.NextInt()
  type: Method
  source:
    id: NextInt
    path: ''
    startLine: 32008
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public virtual int NextInt()
    return:
      type: System.Int32
    content.vb: Public Overridable Function NextInt As Integer
  overload: Org.BouncyCastle.Security.SecureRandom.NextInt*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Org.BouncyCastle.Security.SecureRandom.NextLong
  commentId: M:Org.BouncyCastle.Security.SecureRandom.NextLong
  id: NextLong
  parent: Org.BouncyCastle.Security.SecureRandom
  langs:
  - csharp
  - vb
  name: NextLong()
  nameWithType: SecureRandom.NextLong()
  fullName: Org.BouncyCastle.Security.SecureRandom.NextLong()
  type: Method
  source:
    id: NextLong
    path: ''
    startLine: 32023
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Security
  syntax:
    content: public virtual long NextLong()
    return:
      type: System.Int64
    content.vb: Public Overridable Function NextLong As Long
  overload: Org.BouncyCastle.Security.SecureRandom.NextLong*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Org.BouncyCastle.Security
  commentId: N:Org.BouncyCastle.Security
  name: Org.BouncyCastle.Security
  nameWithType: Org.BouncyCastle.Security
  fullName: Org.BouncyCastle.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: System.Random.Sample
  commentId: M:System.Random.Sample
  parent: System.Random
  isExternal: true
  name: Sample()
  nameWithType: Random.Sample()
  fullName: System.Random.Sample()
  spec.csharp:
  - uid: System.Random.Sample
    name: Sample
    nameWithType: Random.Sample
    fullName: System.Random.Sample
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Random.Sample
    name: Sample
    nameWithType: Random.Sample
    fullName: System.Random.Sample
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Random.NextBytes(System.Span{System.Byte})
  commentId: M:System.Random.NextBytes(System.Span{System.Byte})
  parent: System.Random
  isExternal: true
  name: NextBytes(Span<Byte>)
  nameWithType: Random.NextBytes(Span<Byte>)
  fullName: System.Random.NextBytes(System.Span<System.Byte>)
  nameWithType.vb: Random.NextBytes(Span(Of Byte))
  fullName.vb: System.Random.NextBytes(System.Span(Of System.Byte))
  name.vb: NextBytes(Span(Of Byte))
  spec.csharp:
  - uid: System.Random.NextBytes(System.Span{System.Byte})
    name: NextBytes
    nameWithType: Random.NextBytes
    fullName: System.Random.NextBytes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Random.NextBytes(System.Span{System.Byte})
    name: NextBytes
    nameWithType: Random.NextBytes
    fullName: System.Random.NextBytes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Org.BouncyCastle.Security.SecureRandom.GetNextBytes*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.GetNextBytes
  name: GetNextBytes
  nameWithType: SecureRandom.GetNextBytes
  fullName: Org.BouncyCastle.Security.SecureRandom.GetNextBytes
- uid: Org.BouncyCastle.Security.SecureRandom
  commentId: T:Org.BouncyCastle.Security.SecureRandom
  parent: Org.BouncyCastle.Security
  name: SecureRandom
  nameWithType: SecureRandom
  fullName: Org.BouncyCastle.Security.SecureRandom
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Org.BouncyCastle.Security.SecureRandom.GetInstance*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.GetInstance
  name: GetInstance
  nameWithType: SecureRandom.GetInstance
  fullName: Org.BouncyCastle.Security.SecureRandom.GetInstance
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Org.BouncyCastle.Security.SecureRandom.GetSeed*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.GetSeed
  name: GetSeed
  nameWithType: SecureRandom.GetSeed
  fullName: Org.BouncyCastle.Security.SecureRandom.GetSeed
- uid: IRandomGenerator
  isExternal: true
  name: IRandomGenerator
  nameWithType: IRandomGenerator
  fullName: IRandomGenerator
- uid: Org.BouncyCastle.Security.SecureRandom.#ctor*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.#ctor
  name: SecureRandom
  nameWithType: SecureRandom.SecureRandom
  fullName: Org.BouncyCastle.Security.SecureRandom.SecureRandom
- uid: Org.BouncyCastle.Security.SecureRandom.GenerateSeed*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.GenerateSeed
  name: GenerateSeed
  nameWithType: SecureRandom.GenerateSeed
  fullName: Org.BouncyCastle.Security.SecureRandom.GenerateSeed
- uid: Org.BouncyCastle.Security.SecureRandom.SetSeed*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.SetSeed
  name: SetSeed
  nameWithType: SecureRandom.SetSeed
  fullName: Org.BouncyCastle.Security.SecureRandom.SetSeed
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Random.Next
  commentId: M:System.Random.Next
  parent: System.Random
  isExternal: true
  name: Next()
  nameWithType: Random.Next()
  fullName: System.Random.Next()
  spec.csharp:
  - uid: System.Random.Next
    name: Next
    nameWithType: Random.Next
    fullName: System.Random.Next
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Random.Next
    name: Next
    nameWithType: Random.Next
    fullName: System.Random.Next
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Security.SecureRandom.Next*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.Next
  name: Next
  nameWithType: SecureRandom.Next
  fullName: Org.BouncyCastle.Security.SecureRandom.Next
- uid: System.Random.Next(System.Int32)
  commentId: M:System.Random.Next(System.Int32)
  parent: System.Random
  isExternal: true
  name: Next(Int32)
  nameWithType: Random.Next(Int32)
  fullName: System.Random.Next(System.Int32)
  spec.csharp:
  - uid: System.Random.Next(System.Int32)
    name: Next
    nameWithType: Random.Next
    fullName: System.Random.Next
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Random.Next(System.Int32)
    name: Next
    nameWithType: Random.Next
    fullName: System.Random.Next
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Random.Next(System.Int32,System.Int32)
  commentId: M:System.Random.Next(System.Int32,System.Int32)
  parent: System.Random
  isExternal: true
  name: Next(Int32, Int32)
  nameWithType: Random.Next(Int32, Int32)
  fullName: System.Random.Next(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Random.Next(System.Int32,System.Int32)
    name: Next
    nameWithType: Random.Next
    fullName: System.Random.Next
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Random.Next(System.Int32,System.Int32)
    name: Next
    nameWithType: Random.Next
    fullName: System.Random.Next
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Random.NextBytes(System.Byte[])
  commentId: M:System.Random.NextBytes(System.Byte[])
  parent: System.Random
  isExternal: true
  name: NextBytes(Byte[])
  nameWithType: Random.NextBytes(Byte[])
  fullName: System.Random.NextBytes(System.Byte[])
  nameWithType.vb: Random.NextBytes(Byte())
  fullName.vb: System.Random.NextBytes(System.Byte())
  name.vb: NextBytes(Byte())
  spec.csharp:
  - uid: System.Random.NextBytes(System.Byte[])
    name: NextBytes
    nameWithType: Random.NextBytes
    fullName: System.Random.NextBytes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Random.NextBytes(System.Byte[])
    name: NextBytes
    nameWithType: Random.NextBytes
    fullName: System.Random.NextBytes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Security.SecureRandom.NextBytes*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.NextBytes
  name: NextBytes
  nameWithType: SecureRandom.NextBytes
  fullName: Org.BouncyCastle.Security.SecureRandom.NextBytes
- uid: System.Random.NextDouble
  commentId: M:System.Random.NextDouble
  parent: System.Random
  isExternal: true
  name: NextDouble()
  nameWithType: Random.NextDouble()
  fullName: System.Random.NextDouble()
  spec.csharp:
  - uid: System.Random.NextDouble
    name: NextDouble
    nameWithType: Random.NextDouble
    fullName: System.Random.NextDouble
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Random.NextDouble
    name: NextDouble
    nameWithType: Random.NextDouble
    fullName: System.Random.NextDouble
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Security.SecureRandom.NextDouble*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.NextDouble
  name: NextDouble
  nameWithType: SecureRandom.NextDouble
  fullName: Org.BouncyCastle.Security.SecureRandom.NextDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Org.BouncyCastle.Security.SecureRandom.NextInt*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.NextInt
  name: NextInt
  nameWithType: SecureRandom.NextInt
  fullName: Org.BouncyCastle.Security.SecureRandom.NextInt
- uid: Org.BouncyCastle.Security.SecureRandom.NextLong*
  commentId: Overload:Org.BouncyCastle.Security.SecureRandom.NextLong
  name: NextLong
  nameWithType: SecureRandom.NextLong
  fullName: Org.BouncyCastle.Security.SecureRandom.NextLong
