### YamlMime:ManagedReference
items:
- uid: Winpeak.Client.Models.ListQueue`1
  commentId: T:Winpeak.Client.Models.ListQueue`1
  id: ListQueue`1
  parent: Winpeak.Client.Models
  children:
  - Winpeak.Client.Models.ListQueue`1.Add(`0)
  - Winpeak.Client.Models.ListQueue`1.AddRange(IEnumerable{`0})
  - Winpeak.Client.Models.ListQueue`1.Dequeue
  - Winpeak.Client.Models.ListQueue`1.Enqueue(`0)
  - Winpeak.Client.Models.ListQueue`1.Insert(System.Int32,`0)
  - Winpeak.Client.Models.ListQueue`1.InsertRange(System.Int32,IEnumerable{`0})
  - Winpeak.Client.Models.ListQueue`1.Peek
  - Winpeak.Client.Models.ListQueue`1.Reverse
  - Winpeak.Client.Models.ListQueue`1.Reverse(System.Int32,System.Int32)
  - Winpeak.Client.Models.ListQueue`1.Sort
  - Winpeak.Client.Models.ListQueue`1.Sort(Comparison{`0})
  - Winpeak.Client.Models.ListQueue`1.Sort(IComparer{`0})
  - Winpeak.Client.Models.ListQueue`1.Sort(System.Int32,System.Int32,IComparer{`0})
  langs:
  - csharp
  - vb
  name: ListQueue<T>
  nameWithType: ListQueue<T>
  fullName: Winpeak.Client.Models.ListQueue<T>
  type: Class
  source:
    id: ListQueue
    path: ''
    startLine: 3868
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: 'public class ListQueue<T> : List<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class ListQueue(Of T)
          Inherits List(Of T)
  inheritance:
  - System.Object
  nameWithType.vb: ListQueue(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T)
  name.vb: ListQueue(Of T)
- uid: Winpeak.Client.Models.ListQueue`1.Add(`0)
  commentId: M:Winpeak.Client.Models.ListQueue`1.Add(`0)
  id: Add(`0)
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ListQueue<T>.Add(T)
  fullName: Winpeak.Client.Models.ListQueue<T>.Add(T)
  type: Method
  source:
    id: Add
    path: ''
    startLine: 3870
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Add(item As T)
  overload: Winpeak.Client.Models.ListQueue`1.Add*
  nameWithType.vb: ListQueue(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Add(T)
- uid: Winpeak.Client.Models.ListQueue`1.AddRange(IEnumerable{`0})
  commentId: M:Winpeak.Client.Models.ListQueue`1.AddRange(IEnumerable{`0})
  id: AddRange(IEnumerable{`0})
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<T>)
  nameWithType: ListQueue<T>.AddRange(IEnumerable<T>)
  fullName: Winpeak.Client.Models.ListQueue<T>.AddRange(IEnumerable<T>)
  type: Method
  source:
    id: AddRange
    path: ''
    startLine: 3874
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void AddRange(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: IEnumerable{{T}}
    content.vb: Public Sub AddRange(collection As IEnumerable(Of T))
  overload: Winpeak.Client.Models.ListQueue`1.AddRange*
  nameWithType.vb: ListQueue(Of T).AddRange(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).AddRange(IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
- uid: Winpeak.Client.Models.ListQueue`1.Insert(System.Int32,`0)
  commentId: M:Winpeak.Client.Models.ListQueue`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: ListQueue<T>.Insert(Int32, T)
  fullName: Winpeak.Client.Models.ListQueue<T>.Insert(System.Int32, T)
  type: Method
  source:
    id: Insert
    path: ''
    startLine: 3878
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: Winpeak.Client.Models.ListQueue`1.Insert*
  nameWithType.vb: ListQueue(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Insert(System.Int32, T)
- uid: Winpeak.Client.Models.ListQueue`1.InsertRange(System.Int32,IEnumerable{`0})
  commentId: M:Winpeak.Client.Models.ListQueue`1.InsertRange(System.Int32,IEnumerable{`0})
  id: InsertRange(System.Int32,IEnumerable{`0})
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: ListQueue<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: Winpeak.Client.Models.ListQueue<T>.InsertRange(System.Int32, IEnumerable<T>)
  type: Method
  source:
    id: InsertRange
    path: ''
    startLine: 3882
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void InsertRange(int index, IEnumerable<T> collection)
    parameters:
    - id: index
      type: System.Int32
    - id: collection
      type: IEnumerable{{T}}
    content.vb: Public Sub InsertRange(index As Integer, collection As IEnumerable(Of T))
  overload: Winpeak.Client.Models.ListQueue`1.InsertRange*
  nameWithType.vb: ListQueue(Of T).InsertRange(Int32, IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).InsertRange(System.Int32, IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
- uid: Winpeak.Client.Models.ListQueue`1.Reverse
  commentId: M:Winpeak.Client.Models.ListQueue`1.Reverse
  id: Reverse
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Reverse()
  nameWithType: ListQueue<T>.Reverse()
  fullName: Winpeak.Client.Models.ListQueue<T>.Reverse()
  type: Method
  source:
    id: Reverse
    path: ''
    startLine: 3886
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Reverse()
    content.vb: Public Sub Reverse
  overload: Winpeak.Client.Models.ListQueue`1.Reverse*
  nameWithType.vb: ListQueue(Of T).Reverse()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Reverse()
- uid: Winpeak.Client.Models.ListQueue`1.Reverse(System.Int32,System.Int32)
  commentId: M:Winpeak.Client.Models.ListQueue`1.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Reverse(Int32, Int32)
  nameWithType: ListQueue<T>.Reverse(Int32, Int32)
  fullName: Winpeak.Client.Models.ListQueue<T>.Reverse(System.Int32, System.Int32)
  type: Method
  source:
    id: Reverse
    path: ''
    startLine: 3890
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Reverse(int index, int count)
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    content.vb: Public Sub Reverse(index As Integer, count As Integer)
  overload: Winpeak.Client.Models.ListQueue`1.Reverse*
  nameWithType.vb: ListQueue(Of T).Reverse(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Reverse(System.Int32, System.Int32)
- uid: Winpeak.Client.Models.ListQueue`1.Sort
  commentId: M:Winpeak.Client.Models.ListQueue`1.Sort
  id: Sort
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Sort()
  nameWithType: ListQueue<T>.Sort()
  fullName: Winpeak.Client.Models.ListQueue<T>.Sort()
  type: Method
  source:
    id: Sort
    path: ''
    startLine: 3894
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
  overload: Winpeak.Client.Models.ListQueue`1.Sort*
  nameWithType.vb: ListQueue(Of T).Sort()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Sort()
- uid: Winpeak.Client.Models.ListQueue`1.Sort(Comparison{`0})
  commentId: M:Winpeak.Client.Models.ListQueue`1.Sort(Comparison{`0})
  id: Sort(Comparison{`0})
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Sort(Comparison<T>)
  nameWithType: ListQueue<T>.Sort(Comparison<T>)
  fullName: Winpeak.Client.Models.ListQueue<T>.Sort(Comparison<T>)
  type: Method
  source:
    id: Sort
    path: ''
    startLine: 3898
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Sort(Comparison<T> comparison)
    parameters:
    - id: comparison
      type: Comparison{{T}}
    content.vb: Public Sub Sort(comparison As Comparison(Of T))
  overload: Winpeak.Client.Models.ListQueue`1.Sort*
  nameWithType.vb: ListQueue(Of T).Sort(Comparison(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Sort(Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
- uid: Winpeak.Client.Models.ListQueue`1.Sort(IComparer{`0})
  commentId: M:Winpeak.Client.Models.ListQueue`1.Sort(IComparer{`0})
  id: Sort(IComparer{`0})
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Sort(IComparer<T>)
  nameWithType: ListQueue<T>.Sort(IComparer<T>)
  fullName: Winpeak.Client.Models.ListQueue<T>.Sort(IComparer<T>)
  type: Method
  source:
    id: Sort
    path: ''
    startLine: 3902
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Sort(IComparer<T> comparer)
    parameters:
    - id: comparer
      type: IComparer{{T}}
    content.vb: Public Sub Sort(comparer As IComparer(Of T))
  overload: Winpeak.Client.Models.ListQueue`1.Sort*
  nameWithType.vb: ListQueue(Of T).Sort(IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Sort(IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
- uid: Winpeak.Client.Models.ListQueue`1.Sort(System.Int32,System.Int32,IComparer{`0})
  commentId: M:Winpeak.Client.Models.ListQueue`1.Sort(System.Int32,System.Int32,IComparer{`0})
  id: Sort(System.Int32,System.Int32,IComparer{`0})
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: ListQueue<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: Winpeak.Client.Models.ListQueue<T>.Sort(System.Int32, System.Int32, IComparer<T>)
  type: Method
  source:
    id: Sort
    path: ''
    startLine: 3906
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Sort(int index, int count, IComparer<T> comparer)
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    - id: comparer
      type: IComparer{{T}}
    content.vb: Public Sub Sort(index As Integer, count As Integer, comparer As IComparer(Of T))
  overload: Winpeak.Client.Models.ListQueue`1.Sort*
  nameWithType.vb: ListQueue(Of T).Sort(Int32, Int32, IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Sort(System.Int32, System.Int32, IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
- uid: Winpeak.Client.Models.ListQueue`1.Enqueue(`0)
  commentId: M:Winpeak.Client.Models.ListQueue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Enqueue(T)
  nameWithType: ListQueue<T>.Enqueue(T)
  fullName: Winpeak.Client.Models.ListQueue<T>.Enqueue(T)
  type: Method
  source:
    id: Enqueue
    path: ''
    startLine: 3910
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public void Enqueue(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Enqueue(item As T)
  overload: Winpeak.Client.Models.ListQueue`1.Enqueue*
  nameWithType.vb: ListQueue(Of T).Enqueue(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Enqueue(T)
- uid: Winpeak.Client.Models.ListQueue`1.Dequeue
  commentId: M:Winpeak.Client.Models.ListQueue`1.Dequeue
  id: Dequeue
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Dequeue()
  nameWithType: ListQueue<T>.Dequeue()
  fullName: Winpeak.Client.Models.ListQueue<T>.Dequeue()
  type: Method
  source:
    id: Dequeue
    path: ''
    startLine: 3914
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public T Dequeue()
    return:
      type: '{T}'
    content.vb: Public Function Dequeue As T
  overload: Winpeak.Client.Models.ListQueue`1.Dequeue*
  nameWithType.vb: ListQueue(Of T).Dequeue()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Dequeue()
- uid: Winpeak.Client.Models.ListQueue`1.Peek
  commentId: M:Winpeak.Client.Models.ListQueue`1.Peek
  id: Peek
  parent: Winpeak.Client.Models.ListQueue`1
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: ListQueue<T>.Peek()
  fullName: Winpeak.Client.Models.ListQueue<T>.Peek()
  type: Method
  source:
    id: Peek
    path: ''
    startLine: 3920
  assemblies:
  - cs.temp.dll
  namespace: Winpeak.Client.Models
  syntax:
    content: public T Peek()
    return:
      type: '{T}'
    content.vb: Public Function Peek As T
  overload: Winpeak.Client.Models.ListQueue`1.Peek*
  nameWithType.vb: ListQueue(Of T).Peek()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Peek()
references:
- uid: Winpeak.Client.Models
  commentId: N:Winpeak.Client.Models
  name: Winpeak.Client.Models
  nameWithType: Winpeak.Client.Models
  fullName: Winpeak.Client.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Winpeak.Client.Models.ListQueue`1.Add*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.Add
  name: Add
  nameWithType: ListQueue<T>.Add
  fullName: Winpeak.Client.Models.ListQueue<T>.Add
  nameWithType.vb: ListQueue(Of T).Add
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Winpeak.Client.Models.ListQueue`1.AddRange*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.AddRange
  name: AddRange
  nameWithType: ListQueue<T>.AddRange
  fullName: Winpeak.Client.Models.ListQueue<T>.AddRange
  nameWithType.vb: ListQueue(Of T).AddRange
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).AddRange
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Winpeak.Client.Models.ListQueue`1.Insert*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.Insert
  name: Insert
  nameWithType: ListQueue<T>.Insert
  fullName: Winpeak.Client.Models.ListQueue<T>.Insert
  nameWithType.vb: ListQueue(Of T).Insert
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Insert
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Winpeak.Client.Models.ListQueue`1.InsertRange*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.InsertRange
  name: InsertRange
  nameWithType: ListQueue<T>.InsertRange
  fullName: Winpeak.Client.Models.ListQueue<T>.InsertRange
  nameWithType.vb: ListQueue(Of T).InsertRange
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).InsertRange
- uid: Winpeak.Client.Models.ListQueue`1.Reverse*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.Reverse
  name: Reverse
  nameWithType: ListQueue<T>.Reverse
  fullName: Winpeak.Client.Models.ListQueue<T>.Reverse
  nameWithType.vb: ListQueue(Of T).Reverse
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Reverse
- uid: Winpeak.Client.Models.ListQueue`1.Sort*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.Sort
  name: Sort
  nameWithType: ListQueue<T>.Sort
  fullName: Winpeak.Client.Models.ListQueue<T>.Sort
  nameWithType.vb: ListQueue(Of T).Sort
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Sort
- uid: Comparison{{T}}
  commentId: '!:Comparison{`0}'
  definition: Comparison`1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Comparison`1
  commentId: '!:Comparison`1'
  isExternal: true
  name: Comparison<>
  nameWithType: Comparison<>
  fullName: Comparison<>
  nameWithType.vb: Comparison(Of )
  fullName.vb: Comparison(Of )
  name.vb: Comparison(Of )
  spec.csharp:
  - uid: Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IComparer{{T}}
  commentId: '!:IComparer{`0}'
  definition: IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IComparer`1
  isExternal: true
  name: IComparer<>
  nameWithType: IComparer<>
  fullName: IComparer<>
  nameWithType.vb: IComparer(Of )
  fullName.vb: IComparer(Of )
  name.vb: IComparer(Of )
  spec.csharp:
  - uid: IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Winpeak.Client.Models.ListQueue`1.Enqueue*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.Enqueue
  name: Enqueue
  nameWithType: ListQueue<T>.Enqueue
  fullName: Winpeak.Client.Models.ListQueue<T>.Enqueue
  nameWithType.vb: ListQueue(Of T).Enqueue
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Enqueue
- uid: Winpeak.Client.Models.ListQueue`1.Dequeue*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.Dequeue
  name: Dequeue
  nameWithType: ListQueue<T>.Dequeue
  fullName: Winpeak.Client.Models.ListQueue<T>.Dequeue
  nameWithType.vb: ListQueue(Of T).Dequeue
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Dequeue
- uid: Winpeak.Client.Models.ListQueue`1.Peek*
  commentId: Overload:Winpeak.Client.Models.ListQueue`1.Peek
  name: Peek
  nameWithType: ListQueue<T>.Peek
  fullName: Winpeak.Client.Models.ListQueue<T>.Peek
  nameWithType.vb: ListQueue(Of T).Peek
  fullName.vb: Winpeak.Client.Models.ListQueue(Of T).Peek
