### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms
  commentId: T:Org.BouncyCastle.Math.EC.ECAlgorithms
  id: ECAlgorithms
  parent: Org.BouncyCastle.Math.EC
  children:
  - Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve(Org.BouncyCastle.Math.EC.ECCurve)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField(IFiniteField)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve(Org.BouncyCastle.Math.EC.ECCurve)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField(IFiniteField)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32,Org.BouncyCastle.Math.EC.ECFieldElement)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies(Org.BouncyCastle.Math.EC.ECPoint[],Org.BouncyCastle.Math.BigInteger[])
  - Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  - Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint(Org.BouncyCastle.Math.EC.ECPoint)
  langs:
  - csharp
  - vb
  name: ECAlgorithms
  nameWithType: ECAlgorithms
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms
  type: Class
  source:
    id: ECAlgorithms
    path: ''
    startLine: 52517
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public class ECAlgorithms
    content.vb: Public Class ECAlgorithms
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve(Org.BouncyCastle.Math.EC.ECCurve)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve(Org.BouncyCastle.Math.EC.ECCurve)
  id: IsF2mCurve(Org.BouncyCastle.Math.EC.ECCurve)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: IsF2mCurve(ECCurve)
  nameWithType: ECAlgorithms.IsF2mCurve(ECCurve)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve(Org.BouncyCastle.Math.EC.ECCurve)
  type: Method
  source:
    id: IsF2mCurve
    path: ''
    startLine: 52519
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static bool IsF2mCurve(ECCurve c)
    parameters:
    - id: c
      type: Org.BouncyCastle.Math.EC.ECCurve
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsF2mCurve(c As ECCurve) As Boolean
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField(IFiniteField)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField(IFiniteField)
  id: IsF2mField(IFiniteField)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: IsF2mField(IFiniteField)
  nameWithType: ECAlgorithms.IsF2mField(IFiniteField)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField(IFiniteField)
  type: Method
  source:
    id: IsF2mField
    path: ''
    startLine: 52524
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static bool IsF2mField(IFiniteField field)
    parameters:
    - id: field
      type: IFiniteField
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsF2mField(field As IFiniteField) As Boolean
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve(Org.BouncyCastle.Math.EC.ECCurve)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve(Org.BouncyCastle.Math.EC.ECCurve)
  id: IsFpCurve(Org.BouncyCastle.Math.EC.ECCurve)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: IsFpCurve(ECCurve)
  nameWithType: ECAlgorithms.IsFpCurve(ECCurve)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve(Org.BouncyCastle.Math.EC.ECCurve)
  type: Method
  source:
    id: IsFpCurve
    path: ''
    startLine: 52530
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static bool IsFpCurve(ECCurve c)
    parameters:
    - id: c
      type: Org.BouncyCastle.Math.EC.ECCurve
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFpCurve(c As ECCurve) As Boolean
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField(IFiniteField)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField(IFiniteField)
  id: IsFpField(IFiniteField)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: IsFpField(IFiniteField)
  nameWithType: ECAlgorithms.IsFpField(IFiniteField)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField(IFiniteField)
  type: Method
  source:
    id: IsFpField
    path: ''
    startLine: 52535
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static bool IsFpField(IFiniteField field)
    parameters:
    - id: field
      type: IFiniteField
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFpField(field As IFiniteField) As Boolean
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies(Org.BouncyCastle.Math.EC.ECPoint[],Org.BouncyCastle.Math.BigInteger[])
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies(Org.BouncyCastle.Math.EC.ECPoint[],Org.BouncyCastle.Math.BigInteger[])
  id: SumOfMultiplies(Org.BouncyCastle.Math.EC.ECPoint[],Org.BouncyCastle.Math.BigInteger[])
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: SumOfMultiplies(ECPoint[], BigInteger[])
  nameWithType: ECAlgorithms.SumOfMultiplies(ECPoint[], BigInteger[])
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies(Org.BouncyCastle.Math.EC.ECPoint[], Org.BouncyCastle.Math.BigInteger[])
  type: Method
  source:
    id: SumOfMultiplies
    path: ''
    startLine: 52540
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static ECPoint SumOfMultiplies(ECPoint[] ps, BigInteger[] ks)
    parameters:
    - id: ps
      type: Org.BouncyCastle.Math.EC.ECPoint[]
    - id: ks
      type: Org.BouncyCastle.Math.BigInteger[]
    return:
      type: Org.BouncyCastle.Math.EC.ECPoint
    content.vb: Public Shared Function SumOfMultiplies(ps As ECPoint(), ks As BigInteger()) As ECPoint
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies*
  nameWithType.vb: ECAlgorithms.SumOfMultiplies(ECPoint(), BigInteger())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies(Org.BouncyCastle.Math.EC.ECPoint(), Org.BouncyCastle.Math.BigInteger())
  name.vb: SumOfMultiplies(ECPoint(), BigInteger())
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  id: SumOfTwoMultiplies(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: SumOfTwoMultiplies(ECPoint, BigInteger, ECPoint, BigInteger)
  nameWithType: ECAlgorithms.SumOfTwoMultiplies(ECPoint, BigInteger, ECPoint, BigInteger)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies(Org.BouncyCastle.Math.EC.ECPoint, Org.BouncyCastle.Math.BigInteger, Org.BouncyCastle.Math.EC.ECPoint, Org.BouncyCastle.Math.BigInteger)
  type: Method
  source:
    id: SumOfTwoMultiplies
    path: ''
    startLine: 52575
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static ECPoint SumOfTwoMultiplies(ECPoint P, BigInteger a, ECPoint Q, BigInteger b)
    parameters:
    - id: P
      type: Org.BouncyCastle.Math.EC.ECPoint
    - id: a
      type: Org.BouncyCastle.Math.BigInteger
    - id: Q
      type: Org.BouncyCastle.Math.EC.ECPoint
    - id: b
      type: Org.BouncyCastle.Math.BigInteger
    return:
      type: Org.BouncyCastle.Math.EC.ECPoint
    content.vb: Public Shared Function SumOfTwoMultiplies(P As ECPoint, a As BigInteger, Q As ECPoint, b As BigInteger) As ECPoint
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  id: ShamirsTrick(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: ShamirsTrick(ECPoint, BigInteger, ECPoint, BigInteger)
  nameWithType: ECAlgorithms.ShamirsTrick(ECPoint, BigInteger, ECPoint, BigInteger)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick(Org.BouncyCastle.Math.EC.ECPoint, Org.BouncyCastle.Math.BigInteger, Org.BouncyCastle.Math.EC.ECPoint, Org.BouncyCastle.Math.BigInteger)
  type: Method
  source:
    id: ShamirsTrick
    path: ''
    startLine: 52617
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static ECPoint ShamirsTrick(ECPoint P, BigInteger k, ECPoint Q, BigInteger l)
    parameters:
    - id: P
      type: Org.BouncyCastle.Math.EC.ECPoint
    - id: k
      type: Org.BouncyCastle.Math.BigInteger
    - id: Q
      type: Org.BouncyCastle.Math.EC.ECPoint
    - id: l
      type: Org.BouncyCastle.Math.BigInteger
    return:
      type: Org.BouncyCastle.Math.EC.ECPoint
    content.vb: Public Shared Function ShamirsTrick(P As ECPoint, k As BigInteger, Q As ECPoint, l As BigInteger) As ECPoint
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint)
  id: ImportPoint(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: ImportPoint(ECCurve, ECPoint)
  nameWithType: ECAlgorithms.ImportPoint(ECCurve, ECPoint)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint(Org.BouncyCastle.Math.EC.ECCurve, Org.BouncyCastle.Math.EC.ECPoint)
  type: Method
  source:
    id: ImportPoint
    path: ''
    startLine: 52625
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static ECPoint ImportPoint(ECCurve c, ECPoint p)
    parameters:
    - id: c
      type: Org.BouncyCastle.Math.EC.ECCurve
    - id: p
      type: Org.BouncyCastle.Math.EC.ECPoint
    return:
      type: Org.BouncyCastle.Math.EC.ECPoint
    content.vb: Public Shared Function ImportPoint(c As ECCurve, p As ECPoint) As ECPoint
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32)
  id: MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: MontgomeryTrick(ECFieldElement[], Int32, Int32)
  nameWithType: ECAlgorithms.MontgomeryTrick(ECFieldElement[], Int32, Int32)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[], System.Int32, System.Int32)
  type: Method
  source:
    id: MontgomeryTrick
    path: ''
    startLine: 52634
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len)
    parameters:
    - id: zs
      type: Org.BouncyCastle.Math.EC.ECFieldElement[]
    - id: off
      type: System.Int32
    - id: len
      type: System.Int32
    content.vb: Public Shared Sub MontgomeryTrick(zs As ECFieldElement(), off As Integer, len As Integer)
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick*
  nameWithType.vb: ECAlgorithms.MontgomeryTrick(ECFieldElement(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement(), System.Int32, System.Int32)
  name.vb: MontgomeryTrick(ECFieldElement(), Int32, Int32)
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32,Org.BouncyCastle.Math.EC.ECFieldElement)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32,Org.BouncyCastle.Math.EC.ECFieldElement)
  id: MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32,Org.BouncyCastle.Math.EC.ECFieldElement)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: MontgomeryTrick(ECFieldElement[], Int32, Int32, ECFieldElement)
  nameWithType: ECAlgorithms.MontgomeryTrick(ECFieldElement[], Int32, Int32, ECFieldElement)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[], System.Int32, System.Int32, Org.BouncyCastle.Math.EC.ECFieldElement)
  type: Method
  source:
    id: MontgomeryTrick
    path: ''
    startLine: 52639
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len, ECFieldElement scale)
    parameters:
    - id: zs
      type: Org.BouncyCastle.Math.EC.ECFieldElement[]
    - id: off
      type: System.Int32
    - id: len
      type: System.Int32
    - id: scale
      type: Org.BouncyCastle.Math.EC.ECFieldElement
    content.vb: Public Shared Sub MontgomeryTrick(zs As ECFieldElement(), off As Integer, len As Integer, scale As ECFieldElement)
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick*
  nameWithType.vb: ECAlgorithms.MontgomeryTrick(ECFieldElement(), Int32, Int32, ECFieldElement)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement(), System.Int32, System.Int32, Org.BouncyCastle.Math.EC.ECFieldElement)
  name.vb: MontgomeryTrick(ECFieldElement(), Int32, Int32, ECFieldElement)
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  id: ReferenceMultiply(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: ReferenceMultiply(ECPoint, BigInteger)
  nameWithType: ECAlgorithms.ReferenceMultiply(ECPoint, BigInteger)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply(Org.BouncyCastle.Math.EC.ECPoint, Org.BouncyCastle.Math.BigInteger)
  type: Method
  source:
    id: ReferenceMultiply
    path: ''
    startLine: 52687
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  example: []
  syntax:
    content: public static ECPoint ReferenceMultiply(ECPoint p, BigInteger k)
    parameters:
    - id: p
      type: Org.BouncyCastle.Math.EC.ECPoint
    - id: k
      type: Org.BouncyCastle.Math.BigInteger
    return:
      type: Org.BouncyCastle.Math.EC.ECPoint
    content.vb: Public Shared Function ReferenceMultiply(p As ECPoint, k As BigInteger) As ECPoint
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint(Org.BouncyCastle.Math.EC.ECPoint)
  commentId: M:Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint(Org.BouncyCastle.Math.EC.ECPoint)
  id: ValidatePoint(Org.BouncyCastle.Math.EC.ECPoint)
  parent: Org.BouncyCastle.Math.EC.ECAlgorithms
  langs:
  - csharp
  - vb
  name: ValidatePoint(ECPoint)
  nameWithType: ECAlgorithms.ValidatePoint(ECPoint)
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint(Org.BouncyCastle.Math.EC.ECPoint)
  type: Method
  source:
    id: ValidatePoint
    path: ''
    startLine: 52710
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Math.EC
  syntax:
    content: public static ECPoint ValidatePoint(ECPoint p)
    parameters:
    - id: p
      type: Org.BouncyCastle.Math.EC.ECPoint
    return:
      type: Org.BouncyCastle.Math.EC.ECPoint
    content.vb: Public Shared Function ValidatePoint(p As ECPoint) As ECPoint
  overload: Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Org.BouncyCastle.Math.EC
  commentId: N:Org.BouncyCastle.Math.EC
  name: Org.BouncyCastle.Math.EC
  nameWithType: Org.BouncyCastle.Math.EC
  fullName: Org.BouncyCastle.Math.EC
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve
  name: IsF2mCurve
  nameWithType: ECAlgorithms.IsF2mCurve
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve
- uid: Org.BouncyCastle.Math.EC.ECCurve
  commentId: T:Org.BouncyCastle.Math.EC.ECCurve
  parent: Org.BouncyCastle.Math.EC
  name: ECCurve
  nameWithType: ECCurve
  fullName: Org.BouncyCastle.Math.EC.ECCurve
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField
  name: IsF2mField
  nameWithType: ECAlgorithms.IsF2mField
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField
- uid: IFiniteField
  isExternal: true
  name: IFiniteField
  nameWithType: IFiniteField
  fullName: IFiniteField
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve
  name: IsFpCurve
  nameWithType: ECAlgorithms.IsFpCurve
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField
  name: IsFpField
  nameWithType: ECAlgorithms.IsFpField
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies
  name: SumOfMultiplies
  nameWithType: ECAlgorithms.SumOfMultiplies
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies
- uid: Org.BouncyCastle.Math.EC.ECPoint[]
  isExternal: true
  name: ECPoint[]
  nameWithType: ECPoint[]
  fullName: Org.BouncyCastle.Math.EC.ECPoint[]
  nameWithType.vb: ECPoint()
  fullName.vb: Org.BouncyCastle.Math.EC.ECPoint()
  name.vb: ECPoint()
  spec.csharp:
  - uid: Org.BouncyCastle.Math.EC.ECPoint
    name: ECPoint
    nameWithType: ECPoint
    fullName: Org.BouncyCastle.Math.EC.ECPoint
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Org.BouncyCastle.Math.EC.ECPoint
    name: ECPoint
    nameWithType: ECPoint
    fullName: Org.BouncyCastle.Math.EC.ECPoint
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Org.BouncyCastle.Math.BigInteger[]
  isExternal: true
  name: BigInteger[]
  nameWithType: BigInteger[]
  fullName: Org.BouncyCastle.Math.BigInteger[]
  nameWithType.vb: BigInteger()
  fullName.vb: Org.BouncyCastle.Math.BigInteger()
  name.vb: BigInteger()
  spec.csharp:
  - uid: Org.BouncyCastle.Math.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: Org.BouncyCastle.Math.BigInteger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Org.BouncyCastle.Math.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: Org.BouncyCastle.Math.BigInteger
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Org.BouncyCastle.Math.EC.ECPoint
  commentId: T:Org.BouncyCastle.Math.EC.ECPoint
  parent: Org.BouncyCastle.Math.EC
  name: ECPoint
  nameWithType: ECPoint
  fullName: Org.BouncyCastle.Math.EC.ECPoint
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies
  name: SumOfTwoMultiplies
  nameWithType: ECAlgorithms.SumOfTwoMultiplies
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies
- uid: Org.BouncyCastle.Math.BigInteger
  commentId: T:Org.BouncyCastle.Math.BigInteger
  parent: Org.BouncyCastle.Math
  name: BigInteger
  nameWithType: BigInteger
  fullName: Org.BouncyCastle.Math.BigInteger
- uid: Org.BouncyCastle.Math
  commentId: N:Org.BouncyCastle.Math
  name: Org.BouncyCastle.Math
  nameWithType: Org.BouncyCastle.Math
  fullName: Org.BouncyCastle.Math
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick
  name: ShamirsTrick
  nameWithType: ECAlgorithms.ShamirsTrick
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint
  name: ImportPoint
  nameWithType: ECAlgorithms.ImportPoint
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick
  name: MontgomeryTrick
  nameWithType: ECAlgorithms.MontgomeryTrick
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick
- uid: Org.BouncyCastle.Math.EC.ECFieldElement[]
  isExternal: true
  name: ECFieldElement[]
  nameWithType: ECFieldElement[]
  fullName: Org.BouncyCastle.Math.EC.ECFieldElement[]
  nameWithType.vb: ECFieldElement()
  fullName.vb: Org.BouncyCastle.Math.EC.ECFieldElement()
  name.vb: ECFieldElement()
  spec.csharp:
  - uid: Org.BouncyCastle.Math.EC.ECFieldElement
    name: ECFieldElement
    nameWithType: ECFieldElement
    fullName: Org.BouncyCastle.Math.EC.ECFieldElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Org.BouncyCastle.Math.EC.ECFieldElement
    name: ECFieldElement
    nameWithType: ECFieldElement
    fullName: Org.BouncyCastle.Math.EC.ECFieldElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Org.BouncyCastle.Math.EC.ECFieldElement
  commentId: T:Org.BouncyCastle.Math.EC.ECFieldElement
  parent: Org.BouncyCastle.Math.EC
  name: ECFieldElement
  nameWithType: ECFieldElement
  fullName: Org.BouncyCastle.Math.EC.ECFieldElement
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply
  name: ReferenceMultiply
  nameWithType: ECAlgorithms.ReferenceMultiply
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply
- uid: Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint*
  commentId: Overload:Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint
  name: ValidatePoint
  nameWithType: ECAlgorithms.ValidatePoint
  fullName: Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint
