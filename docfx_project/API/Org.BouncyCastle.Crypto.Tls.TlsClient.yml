### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsClient
  id: TlsClient
  parent: Org.BouncyCastle.Crypto.Tls
  children:
  - Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion
  - Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion
  - Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication
  - Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  - Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  - Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData
  - Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  - Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange
  - Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume
  - Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames
  - Org.BouncyCastle.Crypto.Tls.TlsClient.Init(Org.BouncyCastle.Crypto.Tls.TlsClientContext)
  - Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback
  - Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket(Org.BouncyCastle.Crypto.Tls.NewSessionTicket)
  - Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)
  - Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(System.Byte)
  - Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion(Org.BouncyCastle.Crypto.Tls.ProtocolVersion)
  - Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])
  - Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)
  - Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)
  langs:
  - csharp
  - vb
  name: TlsClient
  nameWithType: TlsClient
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient
  type: Interface
  source:
    id: TlsClient
    path: ''
    startLine: 121251
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: 'public interface TlsClient : TlsPeer'
    content.vb: >-
      Public Interface TlsClient
          Inherits TlsPeer
  inheritedMembers:
  - Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime
  - Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)
  - Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression
  - Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher
  - Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)
  - Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)
  - Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames
  commentId: P:Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames
  id: HostNames
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: HostNames
  nameWithType: TlsClient.HostNames
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames
  type: Property
  source:
    id: HostNames
    path: ''
    startLine: 121254
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: List<string> HostNames { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Property HostNames As List(Of String)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames*
  modifiers.csharp:
  - get
  - set
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.Init(Org.BouncyCastle.Crypto.Tls.TlsClientContext)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.Init(Org.BouncyCastle.Crypto.Tls.TlsClientContext)
  id: Init(Org.BouncyCastle.Crypto.Tls.TlsClientContext)
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: Init(TlsClientContext)
  nameWithType: TlsClient.Init(TlsClientContext)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.Init(Org.BouncyCastle.Crypto.Tls.TlsClientContext)
  type: Method
  source:
    id: Init
    path: ''
    startLine: 121262
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nCalled at the start of a new TLS session, before any other methods.\n"
  example: []
  syntax:
    content: void Init(TlsClientContext context)
    parameters:
    - id: context
      type: Org.BouncyCastle.Crypto.Tls.TlsClientContext
      description: "\nA <see cref=\"!:TlsProtocolHandler\"></see>\n"
    content.vb: Sub Init(context As TlsClientContext)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.Init*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume
  id: GetSessionToResume
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: GetSessionToResume()
  nameWithType: TlsClient.GetSessionToResume()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume()
  type: Method
  source:
    id: GetSessionToResume
    path: ''
    startLine: 121270
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: Return the session this client wants to resume, if any.
  remarks: Note that the peer&apos;s certificate chain for the session (if any) may need to be periodically revalidated.
  example: []
  syntax:
    content: TlsSession GetSessionToResume()
    return:
      type: Org.BouncyCastle.Crypto.Tls.TlsSession
      description: "\nA <xref href=\"Org.BouncyCastle.Crypto.Tls.TlsSession\" data-throw-if-not-resolved=\"false\"></xref> representing the resumable session to be used for this connection,\nor null to use a new session.\n"
    content.vb: Function GetSessionToResume As TlsSession
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion
  commentId: P:Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion
  id: ClientHelloRecordLayerVersion
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: ClientHelloRecordLayerVersion
  nameWithType: TlsClient.ClientHelloRecordLayerVersion
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion
  type: Property
  source:
    id: ClientHelloRecordLayerVersion
    path: ''
    startLine: 121284
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nReturn the <xref href=\"Org.BouncyCastle.Crypto.Tls.ProtocolVersion\" data-throw-if-not-resolved=\"false\"></xref> to use for the <code>TLSPlaintext.version</code> field prior to\nreceiving the server version. NOTE: This method is <strong>not</strong> called for DTLS.\n"
  remarks: "\nSee RFC 5246 E.1.: &quot;TLS clients that wish to negotiate with older servers MAY send any value\n{03,XX} as the record layer version number. Typical values would be {03,00}, the lowest\nversion number supported by the client, and the value of ClientHello.client_version. No\nsingle value will guarantee interoperability with all old servers, but this is a complex\ntopic beyond the scope of this document.&quot;\n"
  example: []
  syntax:
    content: ProtocolVersion ClientHelloRecordLayerVersion { get; }
    parameters: []
    return:
      type: Org.BouncyCastle.Crypto.Tls.ProtocolVersion
      description: The <xref href="Org.BouncyCastle.Crypto.Tls.ProtocolVersion" data-throw-if-not-resolved="false"></xref> to use.
    content.vb: ReadOnly Property ClientHelloRecordLayerVersion As ProtocolVersion
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion
  commentId: P:Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion
  id: ClientVersion
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: ClientVersion
  nameWithType: TlsClient.ClientVersion
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion
  type: Property
  source:
    id: ClientVersion
    path: ''
    startLine: 121286
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: ProtocolVersion ClientVersion { get; }
    parameters: []
    return:
      type: Org.BouncyCastle.Crypto.Tls.ProtocolVersion
    content.vb: ReadOnly Property ClientVersion As ProtocolVersion
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback
  commentId: P:Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback
  id: IsFallback
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: IsFallback
  nameWithType: TlsClient.IsFallback
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback
  type: Property
  source:
    id: IsFallback
    path: ''
    startLine: 121288
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: bool IsFallback { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsFallback As Boolean
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  id: GetCipherSuites
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: GetCipherSuites()
  nameWithType: TlsClient.GetCipherSuites()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites()
  type: Method
  source:
    id: GetCipherSuites
    path: ''
    startLine: 121296
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nGet the list of cipher suites that this client supports.\n"
  example: []
  syntax:
    content: int[] GetCipherSuites()
    return:
      type: System.Int32[]
      description: "\nAn array of <xref href=\"Org.BouncyCastle.Crypto.Tls.CipherSuite\" data-throw-if-not-resolved=\"false\"></xref> values, each specifying a supported cipher suite.\n"
    content.vb: Function GetCipherSuites As Integer()
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  id: GetCompressionMethods
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: GetCompressionMethods()
  nameWithType: TlsClient.GetCompressionMethods()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods()
  type: Method
  source:
    id: GetCompressionMethods
    path: ''
    startLine: 121304
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nGet the list of compression methods that this client supports.\n"
  example: []
  syntax:
    content: byte[] GetCompressionMethods()
    return:
      type: System.Byte[]
      description: "\nAn array of <xref href=\"Org.BouncyCastle.Crypto.Tls.CompressionMethod\" data-throw-if-not-resolved=\"false\"></xref> values, each specifying a supported compression method.\n"
    content.vb: Function GetCompressionMethods As Byte()
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  id: GetClientExtensions
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: GetClientExtensions()
  nameWithType: TlsClient.GetClientExtensions()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions()
  type: Method
  source:
    id: GetClientExtensions
    path: ''
    startLine: 121313
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nGet the (optional) table of client extensions to be included in (extended) client hello.\n"
  example: []
  syntax:
    content: IDictionary GetClientExtensions()
    return:
      type: System.Collections.IDictionary
      description: "\nA <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> (Int32 -> byte[]). May be null.\n"
    content.vb: Function GetClientExtensions As IDictionary
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion(Org.BouncyCastle.Crypto.Tls.ProtocolVersion)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion(Org.BouncyCastle.Crypto.Tls.ProtocolVersion)
  id: NotifyServerVersion(Org.BouncyCastle.Crypto.Tls.ProtocolVersion)
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: NotifyServerVersion(ProtocolVersion)
  nameWithType: TlsClient.NotifyServerVersion(ProtocolVersion)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion(Org.BouncyCastle.Crypto.Tls.ProtocolVersion)
  type: Method
  source:
    id: NotifyServerVersion
    path: ''
    startLine: 121316
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  example: []
  syntax:
    content: void NotifyServerVersion(ProtocolVersion selectedVersion)
    parameters:
    - id: selectedVersion
      type: Org.BouncyCastle.Crypto.Tls.ProtocolVersion
    content.vb: Sub NotifyServerVersion(selectedVersion As ProtocolVersion)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])
  id: NotifySessionID(System.Byte[])
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: NotifySessionID(Byte[])
  nameWithType: TlsClient.NotifySessionID(Byte[])
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])
  type: Method
  source:
    id: NotifySessionID
    path: ''
    startLine: 121322
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nNotifies the client of the session_id sent in the ServerHello.\n"
  example: []
  syntax:
    content: void NotifySessionID(byte[] sessionID)
    parameters:
    - id: sessionID
      type: System.Byte[]
      description: An array of <xref href="System.Byte" data-throw-if-not-resolved="false"></xref>
    content.vb: Sub NotifySessionID(sessionID As Byte())
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID*
  nameWithType.vb: TlsClient.NotifySessionID(Byte())
  fullName.vb: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte())
  name.vb: NotifySessionID(Byte())
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)
  id: NotifySelectedCipherSuite(System.Int32)
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: NotifySelectedCipherSuite(Int32)
  nameWithType: TlsClient.NotifySelectedCipherSuite(Int32)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)
  type: Method
  source:
    id: NotifySelectedCipherSuite
    path: ''
    startLine: 121334
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nReport the cipher suite that was selected by the server.\n"
  remarks: "\nThe protocol handler validates this value against the offered cipher suites\n<xref href=\"Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: void NotifySelectedCipherSuite(int selectedCipherSuite)
    parameters:
    - id: selectedCipherSuite
      type: System.Int32
      description: "\nA <xref href=\"Org.BouncyCastle.Crypto.Tls.CipherSuite\" data-throw-if-not-resolved=\"false\"></xref>\n"
    content.vb: Sub NotifySelectedCipherSuite(selectedCipherSuite As Integer)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(System.Byte)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(System.Byte)
  id: NotifySelectedCompressionMethod(System.Byte)
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: NotifySelectedCompressionMethod(Byte)
  nameWithType: TlsClient.NotifySelectedCompressionMethod(Byte)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(System.Byte)
  type: Method
  source:
    id: NotifySelectedCompressionMethod
    path: ''
    startLine: 121346
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nReport the compression method that was selected by the server.\n"
  remarks: "\nThe protocol handler validates this value against the offered compression methods\n<xref href=\"Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: void NotifySelectedCompressionMethod(byte selectedCompressionMethod)
    parameters:
    - id: selectedCompressionMethod
      type: System.Byte
      description: "\nA <xref href=\"Org.BouncyCastle.Crypto.Tls.CompressionMethod\" data-throw-if-not-resolved=\"false\"></xref>\n"
    content.vb: Sub NotifySelectedCompressionMethod(selectedCompressionMethod As Byte)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)
  id: ProcessServerExtensions(System.Collections.IDictionary)
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: ProcessServerExtensions(IDictionary)
  nameWithType: TlsClient.ProcessServerExtensions(IDictionary)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)
  type: Method
  source:
    id: ProcessServerExtensions
    path: ''
    startLine: 121357
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nReport the extensions from an extended server hello.\n"
  remarks: "\nWill only be called if we returned a non-null result from <xref href=\"Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: void ProcessServerExtensions(IDictionary serverExtensions)
    parameters:
    - id: serverExtensions
      type: System.Collections.IDictionary
      description: "\nA <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>  (Int32 -> byte[])\n"
    content.vb: Sub ProcessServerExtensions(serverExtensions As IDictionary)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)
  id: ProcessServerSupplementalData(System.Collections.IList)
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: ProcessServerSupplementalData(IList)
  nameWithType: TlsClient.ProcessServerSupplementalData(IList)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)
  type: Method
  source:
    id: ProcessServerSupplementalData
    path: ''
    startLine: 121361
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  example: []
  syntax:
    content: void ProcessServerSupplementalData(IList serverSupplementalData)
    parameters:
    - id: serverSupplementalData
      type: System.Collections.IList
      description: A <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> of <xref href="Org.BouncyCastle.Crypto.Tls.SupplementalDataEntry" data-throw-if-not-resolved="false"></xref>
    content.vb: Sub ProcessServerSupplementalData(serverSupplementalData As IList)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange
  id: GetKeyExchange
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: GetKeyExchange()
  nameWithType: TlsClient.GetKeyExchange()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange()
  type: Method
  source:
    id: GetKeyExchange
    path: ''
    startLine: 121371
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nReturn an implementation of <xref href=\"Org.BouncyCastle.Crypto.Tls.TlsKeyExchange\" data-throw-if-not-resolved=\"false\"></xref> to negotiate the key exchange\npart of the protocol.\n"
  example: []
  syntax:
    content: TlsKeyExchange GetKeyExchange()
    return:
      type: Org.BouncyCastle.Crypto.Tls.TlsKeyExchange
      description: "\nA <xref href=\"Org.BouncyCastle.Crypto.Tls.TlsKeyExchange\" data-throw-if-not-resolved=\"false\"></xref>\n"
    content.vb: Function GetKeyExchange As TlsKeyExchange
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication
  id: GetAuthentication
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: GetAuthentication()
  nameWithType: TlsClient.GetAuthentication()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication()
  type: Method
  source:
    id: GetAuthentication
    path: ''
    startLine: 121378
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: "\nReturn an implementation of <xref href=\"Org.BouncyCastle.Crypto.Tls.TlsAuthentication\" data-throw-if-not-resolved=\"false\"></xref> to handle authentication\npart of the protocol.\n"
  example: []
  syntax:
    content: TlsAuthentication GetAuthentication()
    return:
      type: Org.BouncyCastle.Crypto.Tls.TlsAuthentication
    content.vb: Function GetAuthentication As TlsAuthentication
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData
  id: GetClientSupplementalData
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: GetClientSupplementalData()
  nameWithType: TlsClient.GetClientSupplementalData()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData()
  type: Method
  source:
    id: GetClientSupplementalData
    path: ''
    startLine: 121382
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  example: []
  syntax:
    content: IList GetClientSupplementalData()
    return:
      type: System.Collections.IList
      description: A <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> of <xref href="Org.BouncyCastle.Crypto.Tls.SupplementalDataEntry" data-throw-if-not-resolved="false"></xref>
    content.vb: Function GetClientSupplementalData As IList
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData*
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket(Org.BouncyCastle.Crypto.Tls.NewSessionTicket)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket(Org.BouncyCastle.Crypto.Tls.NewSessionTicket)
  id: NotifyNewSessionTicket(Org.BouncyCastle.Crypto.Tls.NewSessionTicket)
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  langs:
  - csharp
  - vb
  name: NotifyNewSessionTicket(NewSessionTicket)
  nameWithType: TlsClient.NotifyNewSessionTicket(NewSessionTicket)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket(Org.BouncyCastle.Crypto.Tls.NewSessionTicket)
  type: Method
  source:
    id: NotifyNewSessionTicket
    path: ''
    startLine: 121392
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  summary: RFC 5077 3.3. NewSessionTicket Handshake Message
  remarks: "\nThis method will be called (only) when a NewSessionTicket handshake message is received. The\nticket is opaque to the client and clients MUST NOT examine the ticket under the assumption\nthat it complies with e.g. <em>RFC 5077 4. Recommended Ticket Construction</em>.\n"
  example: []
  syntax:
    content: void NotifyNewSessionTicket(NewSessionTicket newSessionTicket)
    parameters:
    - id: newSessionTicket
      type: Org.BouncyCastle.Crypto.Tls.NewSessionTicket
      description: The <xref href="Org.BouncyCastle.Crypto.Tls.NewSessionTicket" data-throw-if-not-resolved="false"></xref>
    content.vb: Sub NotifyNewSessionTicket(newSessionTicket As NewSessionTicket)
  overload: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket*
references:
- uid: Org.BouncyCastle.Crypto.Tls
  commentId: N:Org.BouncyCastle.Crypto.Tls
  name: Org.BouncyCastle.Crypto.Tls
  nameWithType: Org.BouncyCastle.Crypto.Tls
  fullName: Org.BouncyCastle.Crypto.Tls
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime
  parent: Org.BouncyCastle.Crypto.Tls.TlsPeer
  name: ShouldUseGmtUnixTime()
  nameWithType: TlsPeer.ShouldUseGmtUnixTime()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime()
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime
    name: ShouldUseGmtUnixTime
    nameWithType: TlsPeer.ShouldUseGmtUnixTime
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime
    name: ShouldUseGmtUnixTime
    nameWithType: TlsPeer.ShouldUseGmtUnixTime
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)
  parent: Org.BouncyCastle.Crypto.Tls.TlsPeer
  isExternal: true
  name: NotifySecureRenegotiation(Boolean)
  nameWithType: TlsPeer.NotifySecureRenegotiation(Boolean)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)
    name: NotifySecureRenegotiation
    nameWithType: TlsPeer.NotifySecureRenegotiation
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)
    name: NotifySecureRenegotiation
    nameWithType: TlsPeer.NotifySecureRenegotiation
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression
  parent: Org.BouncyCastle.Crypto.Tls.TlsPeer
  name: GetCompression()
  nameWithType: TlsPeer.GetCompression()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression()
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression
    name: GetCompression
    nameWithType: TlsPeer.GetCompression
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression
    name: GetCompression
    nameWithType: TlsPeer.GetCompression
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher
  parent: Org.BouncyCastle.Crypto.Tls.TlsPeer
  name: GetCipher()
  nameWithType: TlsPeer.GetCipher()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher()
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher
    name: GetCipher
    nameWithType: TlsPeer.GetCipher
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher
    name: GetCipher
    nameWithType: TlsPeer.GetCipher
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)
  parent: Org.BouncyCastle.Crypto.Tls.TlsPeer
  isExternal: true
  name: NotifyAlertRaised(Byte, Byte, String, Exception)
  nameWithType: TlsPeer.NotifyAlertRaised(Byte, Byte, String, Exception)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte, System.Byte, System.String, System.Exception)
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)
    name: NotifyAlertRaised
    nameWithType: TlsPeer.NotifyAlertRaised
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)
    name: NotifyAlertRaised
    nameWithType: TlsPeer.NotifyAlertRaised
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)
  parent: Org.BouncyCastle.Crypto.Tls.TlsPeer
  isExternal: true
  name: NotifyAlertReceived(Byte, Byte)
  nameWithType: TlsPeer.NotifyAlertReceived(Byte, Byte)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte, System.Byte)
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)
    name: NotifyAlertReceived
    nameWithType: TlsPeer.NotifyAlertReceived
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)
    name: NotifyAlertReceived
    nameWithType: TlsPeer.NotifyAlertReceived
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete
  parent: Org.BouncyCastle.Crypto.Tls.TlsPeer
  name: NotifyHandshakeComplete()
  nameWithType: TlsPeer.NotifyHandshakeComplete()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete()
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete
    name: NotifyHandshakeComplete
    nameWithType: TlsPeer.NotifyHandshakeComplete
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete
    name: NotifyHandshakeComplete
    nameWithType: TlsPeer.NotifyHandshakeComplete
    fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsPeer
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsPeer
  parent: Org.BouncyCastle.Crypto.Tls
  name: TlsPeer
  nameWithType: TlsPeer
  fullName: Org.BouncyCastle.Crypto.Tls.TlsPeer
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames
  name: HostNames
  nameWithType: TlsClient.HostNames
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.HostNames
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.Init*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.Init
  name: Init
  nameWithType: TlsClient.Init
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.Init
- uid: Org.BouncyCastle.Crypto.Tls.TlsClientContext
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsClientContext
  parent: Org.BouncyCastle.Crypto.Tls
  name: TlsClientContext
  nameWithType: TlsClientContext
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClientContext
- uid: Org.BouncyCastle.Crypto.Tls.TlsSession
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsSession
  parent: Org.BouncyCastle.Crypto.Tls
  name: TlsSession
  nameWithType: TlsSession
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSession
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume
  name: GetSessionToResume
  nameWithType: TlsClient.GetSessionToResume
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume
- uid: Org.BouncyCastle.Crypto.Tls.ProtocolVersion
  commentId: T:Org.BouncyCastle.Crypto.Tls.ProtocolVersion
  parent: Org.BouncyCastle.Crypto.Tls
  name: ProtocolVersion
  nameWithType: ProtocolVersion
  fullName: Org.BouncyCastle.Crypto.Tls.ProtocolVersion
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion
  name: ClientHelloRecordLayerVersion
  nameWithType: TlsClient.ClientHelloRecordLayerVersion
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion
  name: ClientVersion
  nameWithType: TlsClient.ClientVersion
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ClientVersion
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback
  name: IsFallback
  nameWithType: TlsClient.IsFallback
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.IsFallback
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Org.BouncyCastle.Crypto.Tls.CipherSuite
  commentId: T:Org.BouncyCastle.Crypto.Tls.CipherSuite
  name: CipherSuite
  nameWithType: CipherSuite
  fullName: Org.BouncyCastle.Crypto.Tls.CipherSuite
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  name: GetCipherSuites
  nameWithType: TlsClient.GetCipherSuites
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Org.BouncyCastle.Crypto.Tls.CompressionMethod
  commentId: T:Org.BouncyCastle.Crypto.Tls.CompressionMethod
  name: CompressionMethod
  nameWithType: CompressionMethod
  fullName: Org.BouncyCastle.Crypto.Tls.CompressionMethod
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  name: GetCompressionMethods
  nameWithType: TlsClient.GetCompressionMethods
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  name: GetClientExtensions
  nameWithType: TlsClient.GetClientExtensions
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion
  name: NotifyServerVersion
  nameWithType: TlsClient.NotifyServerVersion
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID
  name: NotifySessionID
  nameWithType: TlsClient.NotifySessionID
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  name: GetCipherSuites()
  nameWithType: TlsClient.GetCipherSuites()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites()
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
    name: GetCipherSuites
    nameWithType: TlsClient.GetCipherSuites
    fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
    name: GetCipherSuites
    nameWithType: TlsClient.GetCipherSuites
    fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite
  name: NotifySelectedCipherSuite
  nameWithType: TlsClient.NotifySelectedCipherSuite
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsClient
  parent: Org.BouncyCastle.Crypto.Tls
  name: TlsClient
  nameWithType: TlsClient
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  name: GetCompressionMethods()
  nameWithType: TlsClient.GetCompressionMethods()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods()
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
    name: GetCompressionMethods
    nameWithType: TlsClient.GetCompressionMethods
    fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
    name: GetCompressionMethods
    nameWithType: TlsClient.GetCompressionMethods
    fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod
  name: NotifySelectedCompressionMethod
  nameWithType: TlsClient.NotifySelectedCompressionMethod
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  parent: Org.BouncyCastle.Crypto.Tls.TlsClient
  name: GetClientExtensions()
  nameWithType: TlsClient.GetClientExtensions()
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions()
  spec.csharp:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
    name: GetClientExtensions
    nameWithType: TlsClient.GetClientExtensions
    fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
    name: GetClientExtensions
    nameWithType: TlsClient.GetClientExtensions
    fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions
  name: ProcessServerExtensions
  nameWithType: TlsClient.ProcessServerExtensions
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: Org.BouncyCastle.Crypto.Tls.SupplementalDataEntry
  commentId: T:Org.BouncyCastle.Crypto.Tls.SupplementalDataEntry
  name: SupplementalDataEntry
  nameWithType: SupplementalDataEntry
  fullName: Org.BouncyCastle.Crypto.Tls.SupplementalDataEntry
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData
  name: ProcessServerSupplementalData
  nameWithType: TlsClient.ProcessServerSupplementalData
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData
- uid: Org.BouncyCastle.Crypto.Tls.TlsKeyExchange
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange
  parent: Org.BouncyCastle.Crypto.Tls
  name: TlsKeyExchange
  nameWithType: TlsKeyExchange
  fullName: Org.BouncyCastle.Crypto.Tls.TlsKeyExchange
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange
  name: GetKeyExchange
  nameWithType: TlsClient.GetKeyExchange
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange
- uid: Org.BouncyCastle.Crypto.Tls.TlsAuthentication
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsAuthentication
  parent: Org.BouncyCastle.Crypto.Tls
  name: TlsAuthentication
  nameWithType: TlsAuthentication
  fullName: Org.BouncyCastle.Crypto.Tls.TlsAuthentication
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication
  name: GetAuthentication
  nameWithType: TlsClient.GetAuthentication
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData
  name: GetClientSupplementalData
  nameWithType: TlsClient.GetClientSupplementalData
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData
- uid: Org.BouncyCastle.Crypto.Tls.NewSessionTicket
  commentId: T:Org.BouncyCastle.Crypto.Tls.NewSessionTicket
  parent: Org.BouncyCastle.Crypto.Tls
  name: NewSessionTicket
  nameWithType: NewSessionTicket
  fullName: Org.BouncyCastle.Crypto.Tls.NewSessionTicket
- uid: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket
  name: NotifyNewSessionTicket
  nameWithType: TlsClient.NotifyNewSessionTicket
  fullName: Org.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket
