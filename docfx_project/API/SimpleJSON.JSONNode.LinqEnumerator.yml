### YamlMime:ManagedReference
items:
- uid: SimpleJSON.JSONNode.LinqEnumerator
  commentId: T:SimpleJSON.JSONNode.LinqEnumerator
  id: JSONNode.LinqEnumerator
  parent: SimpleJSON
  children:
  - SimpleJSON.JSONNode.LinqEnumerator.Current
  - SimpleJSON.JSONNode.LinqEnumerator.Dispose
  - SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator
  - SimpleJSON.JSONNode.LinqEnumerator.MoveNext
  - SimpleJSON.JSONNode.LinqEnumerator.Reset
  langs:
  - csharp
  - vb
  name: JSONNode.LinqEnumerator
  nameWithType: JSONNode.LinqEnumerator
  fullName: SimpleJSON.JSONNode.LinqEnumerator
  type: Class
  source:
    id: LinqEnumerator
    path: ''
    startLine: 1307
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: 'public class LinqEnumerator : IEnumerator<KeyValuePair<string, JSONNode>>, IEnumerable<KeyValuePair<string, JSONNode>>'
    content.vb: >-
      Public Class LinqEnumerator
          Inherits IEnumerator(Of KeyValuePair(Of String, JSONNode))
          Implements IEnumerable(Of KeyValuePair(Of String, JSONNode))
  inheritance:
  - System.Object
  implements:
  - IEnumerable{KeyValuePair{System.String,SimpleJSON.JSONNode}}
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SimpleJSON.JSONNode.LinqEnumerator.Current
  commentId: P:SimpleJSON.JSONNode.LinqEnumerator.Current
  id: Current
  parent: SimpleJSON.JSONNode.LinqEnumerator
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: JSONNode.LinqEnumerator.Current
  fullName: SimpleJSON.JSONNode.LinqEnumerator.Current
  type: Property
  source:
    id: Current
    path: ''
    startLine: 1317
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public KeyValuePair<string, JSONNode> Current { get; }
    parameters: []
    return:
      type: KeyValuePair{System.String,SimpleJSON.JSONNode}
    content.vb: Public ReadOnly Property Current As KeyValuePair(Of String, JSONNode)
  overload: SimpleJSON.JSONNode.LinqEnumerator.Current*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SimpleJSON.JSONNode.LinqEnumerator.MoveNext
  commentId: M:SimpleJSON.JSONNode.LinqEnumerator.MoveNext
  id: MoveNext
  parent: SimpleJSON.JSONNode.LinqEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: JSONNode.LinqEnumerator.MoveNext()
  fullName: SimpleJSON.JSONNode.LinqEnumerator.MoveNext()
  type: Method
  source:
    id: MoveNext
    path: ''
    startLine: 1319
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
    content.vb: Public Function MoveNext As Boolean
  overload: SimpleJSON.JSONNode.LinqEnumerator.MoveNext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SimpleJSON.JSONNode.LinqEnumerator.Dispose
  commentId: M:SimpleJSON.JSONNode.LinqEnumerator.Dispose
  id: Dispose
  parent: SimpleJSON.JSONNode.LinqEnumerator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: JSONNode.LinqEnumerator.Dispose()
  fullName: SimpleJSON.JSONNode.LinqEnumerator.Dispose()
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 1321
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: SimpleJSON.JSONNode.LinqEnumerator.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator
  commentId: M:SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator
  id: GetEnumerator
  parent: SimpleJSON.JSONNode.LinqEnumerator
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: JSONNode.LinqEnumerator.GetEnumerator()
  fullName: SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: ''
    startLine: 1327
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public IEnumerator<KeyValuePair<string, JSONNode>> GetEnumerator()
    return:
      type: IEnumerator{KeyValuePair{System.String,SimpleJSON.JSONNode}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, JSONNode))
  overload: SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SimpleJSON.JSONNode.LinqEnumerator.Reset
  commentId: M:SimpleJSON.JSONNode.LinqEnumerator.Reset
  id: Reset
  parent: SimpleJSON.JSONNode.LinqEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: JSONNode.LinqEnumerator.Reset()
  fullName: SimpleJSON.JSONNode.LinqEnumerator.Reset()
  type: Method
  source:
    id: Reset
    path: ''
    startLine: 1332
  assemblies:
  - cs.temp.dll
  namespace: SimpleJSON
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: SimpleJSON.JSONNode.LinqEnumerator.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SimpleJSON
  commentId: N:SimpleJSON
  name: SimpleJSON
  nameWithType: SimpleJSON
  fullName: SimpleJSON
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: IEnumerable{KeyValuePair{System.String,SimpleJSON.JSONNode}}
  commentId: '!:IEnumerable{KeyValuePair{System.String,SimpleJSON.JSONNode}}'
  definition: IEnumerable`1
  name: IEnumerable<KeyValuePair<String, JSONNode>>
  nameWithType: IEnumerable<KeyValuePair<String, JSONNode>>
  fullName: IEnumerable<KeyValuePair<System.String, SimpleJSON.JSONNode>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, JSONNode))
  fullName.vb: IEnumerable(Of KeyValuePair(Of System.String, SimpleJSON.JSONNode))
  name.vb: IEnumerable(Of KeyValuePair(Of String, JSONNode))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SimpleJSON.JSONNode.LinqEnumerator.Current*
  commentId: Overload:SimpleJSON.JSONNode.LinqEnumerator.Current
  name: Current
  nameWithType: JSONNode.LinqEnumerator.Current
  fullName: SimpleJSON.JSONNode.LinqEnumerator.Current
- uid: KeyValuePair{System.String,SimpleJSON.JSONNode}
  commentId: '!:KeyValuePair{System.String,SimpleJSON.JSONNode}'
  definition: KeyValuePair`2
  name: KeyValuePair<String, JSONNode>
  nameWithType: KeyValuePair<String, JSONNode>
  fullName: KeyValuePair<System.String, SimpleJSON.JSONNode>
  nameWithType.vb: KeyValuePair(Of String, JSONNode)
  fullName.vb: KeyValuePair(Of System.String, SimpleJSON.JSONNode)
  name.vb: KeyValuePair(Of String, JSONNode)
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: )
    nameWithType: )
    fullName: )
- uid: KeyValuePair`2
  isExternal: true
  name: KeyValuePair<, >
  nameWithType: KeyValuePair<, >
  fullName: KeyValuePair<, >
  nameWithType.vb: KeyValuePair(Of , )
  fullName.vb: KeyValuePair(Of , )
  name.vb: KeyValuePair(Of , )
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SimpleJSON.JSONNode.LinqEnumerator.MoveNext*
  commentId: Overload:SimpleJSON.JSONNode.LinqEnumerator.MoveNext
  name: MoveNext
  nameWithType: JSONNode.LinqEnumerator.MoveNext
  fullName: SimpleJSON.JSONNode.LinqEnumerator.MoveNext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SimpleJSON.JSONNode.LinqEnumerator.Dispose*
  commentId: Overload:SimpleJSON.JSONNode.LinqEnumerator.Dispose
  name: Dispose
  nameWithType: JSONNode.LinqEnumerator.Dispose
  fullName: SimpleJSON.JSONNode.LinqEnumerator.Dispose
- uid: SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator*
  commentId: Overload:SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator
  name: GetEnumerator
  nameWithType: JSONNode.LinqEnumerator.GetEnumerator
  fullName: SimpleJSON.JSONNode.LinqEnumerator.GetEnumerator
- uid: IEnumerator{KeyValuePair{System.String,SimpleJSON.JSONNode}}
  commentId: '!:IEnumerator{KeyValuePair{System.String,SimpleJSON.JSONNode}}'
  definition: IEnumerator`1
  name: IEnumerator<KeyValuePair<String, JSONNode>>
  nameWithType: IEnumerator<KeyValuePair<String, JSONNode>>
  fullName: IEnumerator<KeyValuePair<System.String, SimpleJSON.JSONNode>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, JSONNode))
  fullName.vb: IEnumerator(Of KeyValuePair(Of System.String, SimpleJSON.JSONNode))
  name.vb: IEnumerator(Of KeyValuePair(Of String, JSONNode))
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SimpleJSON.JSONNode
    name: JSONNode
    nameWithType: JSONNode
    fullName: SimpleJSON.JSONNode
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  commentId: '!:IEnumerator`1'
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SimpleJSON.JSONNode.LinqEnumerator.Reset*
  commentId: Overload:SimpleJSON.JSONNode.LinqEnumerator.Reset
  name: Reset
  nameWithType: JSONNode.LinqEnumerator.Reset
  fullName: SimpleJSON.JSONNode.LinqEnumerator.Reset
