### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Crypto.IWrapper
  commentId: T:Org.BouncyCastle.Crypto.IWrapper
  id: IWrapper
  parent: Org.BouncyCastle.Crypto
  children:
  - Org.BouncyCastle.Crypto.IWrapper.AlgorithmName
  - Org.BouncyCastle.Crypto.IWrapper.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  - Org.BouncyCastle.Crypto.IWrapper.Unwrap(System.Byte[],System.Int32,System.Int32)
  - Org.BouncyCastle.Crypto.IWrapper.Wrap(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: IWrapper
  nameWithType: IWrapper
  fullName: Org.BouncyCastle.Crypto.IWrapper
  type: Interface
  source:
    id: IWrapper
    path: ''
    startLine: 47501
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: public interface IWrapper
    content.vb: Public Interface IWrapper
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Org.BouncyCastle.Crypto.IWrapper.AlgorithmName
  commentId: P:Org.BouncyCastle.Crypto.IWrapper.AlgorithmName
  id: AlgorithmName
  parent: Org.BouncyCastle.Crypto.IWrapper
  langs:
  - csharp
  - vb
  name: AlgorithmName
  nameWithType: IWrapper.AlgorithmName
  fullName: Org.BouncyCastle.Crypto.IWrapper.AlgorithmName
  type: Property
  source:
    id: AlgorithmName
    path: ''
    startLine: 47504
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  summary: The name of the algorithm this cipher implements.
  example: []
  syntax:
    content: string AlgorithmName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property AlgorithmName As String
  overload: Org.BouncyCastle.Crypto.IWrapper.AlgorithmName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Org.BouncyCastle.Crypto.IWrapper.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  commentId: M:Org.BouncyCastle.Crypto.IWrapper.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  id: Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  parent: Org.BouncyCastle.Crypto.IWrapper
  langs:
  - csharp
  - vb
  name: Init(Boolean, ICipherParameters)
  nameWithType: IWrapper.Init(Boolean, ICipherParameters)
  fullName: Org.BouncyCastle.Crypto.IWrapper.Init(System.Boolean, Org.BouncyCastle.Crypto.ICipherParameters)
  type: Method
  source:
    id: Init
    path: ''
    startLine: 47506
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: void Init(bool forWrapping, ICipherParameters parameters)
    parameters:
    - id: forWrapping
      type: System.Boolean
    - id: parameters
      type: Org.BouncyCastle.Crypto.ICipherParameters
    content.vb: Sub Init(forWrapping As Boolean, parameters As ICipherParameters)
  overload: Org.BouncyCastle.Crypto.IWrapper.Init*
- uid: Org.BouncyCastle.Crypto.IWrapper.Wrap(System.Byte[],System.Int32,System.Int32)
  commentId: M:Org.BouncyCastle.Crypto.IWrapper.Wrap(System.Byte[],System.Int32,System.Int32)
  id: Wrap(System.Byte[],System.Int32,System.Int32)
  parent: Org.BouncyCastle.Crypto.IWrapper
  langs:
  - csharp
  - vb
  name: Wrap(Byte[], Int32, Int32)
  nameWithType: IWrapper.Wrap(Byte[], Int32, Int32)
  fullName: Org.BouncyCastle.Crypto.IWrapper.Wrap(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    id: Wrap
    path: ''
    startLine: 47508
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: byte[] Wrap(byte[] input, int inOff, int length)
    parameters:
    - id: input
      type: System.Byte[]
    - id: inOff
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Byte[]
    content.vb: Function Wrap(input As Byte(), inOff As Integer, length As Integer) As Byte()
  overload: Org.BouncyCastle.Crypto.IWrapper.Wrap*
  nameWithType.vb: IWrapper.Wrap(Byte(), Int32, Int32)
  fullName.vb: Org.BouncyCastle.Crypto.IWrapper.Wrap(System.Byte(), System.Int32, System.Int32)
  name.vb: Wrap(Byte(), Int32, Int32)
- uid: Org.BouncyCastle.Crypto.IWrapper.Unwrap(System.Byte[],System.Int32,System.Int32)
  commentId: M:Org.BouncyCastle.Crypto.IWrapper.Unwrap(System.Byte[],System.Int32,System.Int32)
  id: Unwrap(System.Byte[],System.Int32,System.Int32)
  parent: Org.BouncyCastle.Crypto.IWrapper
  langs:
  - csharp
  - vb
  name: Unwrap(Byte[], Int32, Int32)
  nameWithType: IWrapper.Unwrap(Byte[], Int32, Int32)
  fullName: Org.BouncyCastle.Crypto.IWrapper.Unwrap(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    id: Unwrap
    path: ''
    startLine: 47510
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: byte[] Unwrap(byte[] input, int inOff, int length)
    parameters:
    - id: input
      type: System.Byte[]
    - id: inOff
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Byte[]
    content.vb: Function Unwrap(input As Byte(), inOff As Integer, length As Integer) As Byte()
  overload: Org.BouncyCastle.Crypto.IWrapper.Unwrap*
  nameWithType.vb: IWrapper.Unwrap(Byte(), Int32, Int32)
  fullName.vb: Org.BouncyCastle.Crypto.IWrapper.Unwrap(System.Byte(), System.Int32, System.Int32)
  name.vb: Unwrap(Byte(), Int32, Int32)
references:
- uid: Org.BouncyCastle.Crypto
  commentId: N:Org.BouncyCastle.Crypto
  name: Org.BouncyCastle.Crypto
  nameWithType: Org.BouncyCastle.Crypto
  fullName: Org.BouncyCastle.Crypto
- uid: Org.BouncyCastle.Crypto.IWrapper.AlgorithmName*
  commentId: Overload:Org.BouncyCastle.Crypto.IWrapper.AlgorithmName
  name: AlgorithmName
  nameWithType: IWrapper.AlgorithmName
  fullName: Org.BouncyCastle.Crypto.IWrapper.AlgorithmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Org.BouncyCastle.Crypto.IWrapper.Init*
  commentId: Overload:Org.BouncyCastle.Crypto.IWrapper.Init
  name: Init
  nameWithType: IWrapper.Init
  fullName: Org.BouncyCastle.Crypto.IWrapper.Init
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Org.BouncyCastle.Crypto.ICipherParameters
  commentId: T:Org.BouncyCastle.Crypto.ICipherParameters
  parent: Org.BouncyCastle.Crypto
  name: ICipherParameters
  nameWithType: ICipherParameters
  fullName: Org.BouncyCastle.Crypto.ICipherParameters
- uid: Org.BouncyCastle.Crypto.IWrapper.Wrap*
  commentId: Overload:Org.BouncyCastle.Crypto.IWrapper.Wrap
  name: Wrap
  nameWithType: IWrapper.Wrap
  fullName: Org.BouncyCastle.Crypto.IWrapper.Wrap
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Org.BouncyCastle.Crypto.IWrapper.Unwrap*
  commentId: Overload:Org.BouncyCastle.Crypto.IWrapper.Unwrap
  name: Unwrap
  nameWithType: IWrapper.Unwrap
  fullName: Org.BouncyCastle.Crypto.IWrapper.Unwrap
