### YamlMime:ManagedReference
items:
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  commentId: T:BestHTTP.WebSocket.Frames.WebSocketFrameReader
  id: WebSocketFrameReader
  parent: BestHTTP.WebSocket.Frames
  children:
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble(System.Collections.Generic.List{BestHTTP.WebSocket.Frames.WebSocketFrameReader})
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions(BestHTTP.WebSocket.WebSocket)
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask
  - BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type
  langs:
  - csharp
  - vb
  name: WebSocketFrameReader
  nameWithType: WebSocketFrameReader
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  type: Class
  source:
    id: WebSocketFrameReader
    path: ''
    startLine: 21622
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nRepresents an incoming WebSocket Frame.\n"
  example: []
  syntax:
    content: public sealed class WebSocketFrameReader
    content.vb: Public NotInheritable Class WebSocketFrameReader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header
  id: Header
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: Header
  nameWithType: WebSocketFrameReader.Header
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header
  type: Property
  source:
    id: Header
    path: ''
    startLine: 21626
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  syntax:
    content: public byte Header { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public ReadOnly Property Header As Byte
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal
  id: IsFinal
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: IsFinal
  nameWithType: WebSocketFrameReader.IsFinal
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal
  type: Property
  source:
    id: IsFinal
    path: ''
    startLine: 21631
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nTrue if it&apos;s a final Frame in a sequence, or the only one.\n"
  example: []
  syntax:
    content: public bool IsFinal { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFinal As Boolean
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type
  id: Type
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: WebSocketFrameReader.Type
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type
  type: Property
  source:
    id: Type
    path: ''
    startLine: 21636
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nThe type of the Frame.\n"
  example: []
  syntax:
    content: public WebSocketFrameTypes Type { get; }
    parameters: []
    return:
      type: BestHTTP.WebSocket.Frames.WebSocketFrameTypes
    content.vb: Public ReadOnly Property Type As WebSocketFrameTypes
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask
  id: HasMask
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: HasMask
  nameWithType: WebSocketFrameReader.HasMask
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask
  type: Property
  source:
    id: HasMask
    path: ''
    startLine: 21641
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nIndicates if there are any mask sent to decode the data.\n"
  example: []
  syntax:
    content: public bool HasMask { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasMask As Boolean
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length
  id: Length
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: WebSocketFrameReader.Length
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length
  type: Property
  source:
    id: Length
    path: ''
    startLine: 21646
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nThe length of the Data.\n"
  example: []
  syntax:
    content: public ulong Length { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property Length As ULong
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask
  id: Mask
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: Mask
  nameWithType: WebSocketFrameReader.Mask
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask
  type: Property
  source:
    id: Mask
    path: ''
    startLine: 21651
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nThe sent byte array as a mask to decode the data.\n"
  example: []
  syntax:
    content: public byte[] Mask { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property Mask As Byte()
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data
  id: Data
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: WebSocketFrameReader.Data
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data
  type: Property
  source:
    id: Data
    path: ''
    startLine: 21656
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nThe decoded array of bytes.\n"
  example: []
  syntax:
    content: public byte[] Data { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property Data As Byte()
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText
  commentId: P:BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText
  id: DataAsText
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: DataAsText
  nameWithType: WebSocketFrameReader.DataAsText
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText
  type: Property
  source:
    id: DataAsText
    path: ''
    startLine: 21661
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nTextual representation of the received Data.\n"
  example: []
  syntax:
    content: public string DataAsText { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DataAsText As String
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble(System.Collections.Generic.List{BestHTTP.WebSocket.Frames.WebSocketFrameReader})
  commentId: M:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble(System.Collections.Generic.List{BestHTTP.WebSocket.Frames.WebSocketFrameReader})
  id: Assemble(System.Collections.Generic.List{BestHTTP.WebSocket.Frames.WebSocketFrameReader})
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: Assemble(List<WebSocketFrameReader>)
  nameWithType: WebSocketFrameReader.Assemble(List<WebSocketFrameReader>)
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble(System.Collections.Generic.List<BestHTTP.WebSocket.Frames.WebSocketFrameReader>)
  type: Method
  source:
    id: Assemble
    path: ''
    startLine: 21760
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nAssembles all fragments into a final frame. Call this on the last fragment of a frame.\n"
  example: []
  syntax:
    content: public void Assemble(List<WebSocketFrameReader> fragments)
    parameters:
    - id: fragments
      type: System.Collections.Generic.List{BestHTTP.WebSocket.Frames.WebSocketFrameReader}
      description: The list of previously downloaded and parsed fragments of the frame
    content.vb: Public Sub Assemble(fragments As List(Of WebSocketFrameReader))
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble*
  nameWithType.vb: WebSocketFrameReader.Assemble(List(Of WebSocketFrameReader))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble(System.Collections.Generic.List(Of BestHTTP.WebSocket.Frames.WebSocketFrameReader))
  name.vb: Assemble(List(Of WebSocketFrameReader))
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions(BestHTTP.WebSocket.WebSocket)
  commentId: M:BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions(BestHTTP.WebSocket.WebSocket)
  id: DecodeWithExtensions(BestHTTP.WebSocket.WebSocket)
  parent: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  langs:
  - csharp
  - vb
  name: DecodeWithExtensions(WebSocket)
  nameWithType: WebSocketFrameReader.DecodeWithExtensions(WebSocket)
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions(BestHTTP.WebSocket.WebSocket)
  type: Method
  source:
    id: DecodeWithExtensions
    path: ''
    startLine: 21790
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.WebSocket.Frames
  summary: "\nThis function will decode the received data incrementally with the associated websocket&apos;s extensions.\n"
  example: []
  syntax:
    content: public void DecodeWithExtensions(WebSocket webSocket)
    parameters:
    - id: webSocket
      type: BestHTTP.WebSocket.WebSocket
    content.vb: Public Sub DecodeWithExtensions(webSocket As WebSocket)
  overload: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: BestHTTP.WebSocket.Frames
  commentId: N:BestHTTP.WebSocket.Frames
  name: BestHTTP.WebSocket.Frames
  nameWithType: BestHTTP.WebSocket.Frames
  fullName: BestHTTP.WebSocket.Frames
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header
  name: Header
  nameWithType: WebSocketFrameReader.Header
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Header
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal
  name: IsFinal
  nameWithType: WebSocketFrameReader.IsFinal
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.IsFinal
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type
  name: Type
  nameWithType: WebSocketFrameReader.Type
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Type
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameTypes
  commentId: T:BestHTTP.WebSocket.Frames.WebSocketFrameTypes
  parent: BestHTTP.WebSocket.Frames
  name: WebSocketFrameTypes
  nameWithType: WebSocketFrameTypes
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameTypes
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask
  name: HasMask
  nameWithType: WebSocketFrameReader.HasMask
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.HasMask
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length
  name: Length
  nameWithType: WebSocketFrameReader.Length
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Length
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask
  name: Mask
  nameWithType: WebSocketFrameReader.Mask
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Mask
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data
  name: Data
  nameWithType: WebSocketFrameReader.Data
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Data
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText
  name: DataAsText
  nameWithType: WebSocketFrameReader.DataAsText
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DataAsText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble
  name: Assemble
  nameWithType: WebSocketFrameReader.Assemble
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.Assemble
- uid: System.Collections.Generic.List{BestHTTP.WebSocket.Frames.WebSocketFrameReader}
  commentId: T:System.Collections.Generic.List{BestHTTP.WebSocket.Frames.WebSocketFrameReader}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<WebSocketFrameReader>
  nameWithType: List<WebSocketFrameReader>
  fullName: System.Collections.Generic.List<BestHTTP.WebSocket.Frames.WebSocketFrameReader>
  nameWithType.vb: List(Of WebSocketFrameReader)
  fullName.vb: System.Collections.Generic.List(Of BestHTTP.WebSocket.Frames.WebSocketFrameReader)
  name.vb: List(Of WebSocketFrameReader)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader
    name: WebSocketFrameReader
    nameWithType: WebSocketFrameReader
    fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader
    name: WebSocketFrameReader
    nameWithType: WebSocketFrameReader
    fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions*
  commentId: Overload:BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions
  name: DecodeWithExtensions
  nameWithType: WebSocketFrameReader.DecodeWithExtensions
  fullName: BestHTTP.WebSocket.Frames.WebSocketFrameReader.DecodeWithExtensions
- uid: BestHTTP.WebSocket.WebSocket
  commentId: T:BestHTTP.WebSocket.WebSocket
  parent: BestHTTP.WebSocket
  name: WebSocket
  nameWithType: WebSocket
  fullName: BestHTTP.WebSocket.WebSocket
- uid: BestHTTP.WebSocket
  commentId: N:BestHTTP.WebSocket
  name: BestHTTP.WebSocket
  nameWithType: BestHTTP.WebSocket
  fullName: BestHTTP.WebSocket
