### YamlMime:ManagedReference
items:
- uid: BestHTTP.HTTPProxy
  commentId: T:BestHTTP.HTTPProxy
  id: HTTPProxy
  parent: BestHTTP
  children:
  - BestHTTP.HTTPProxy.#ctor(System.Uri)
  - BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials)
  - BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean)
  - BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean,System.Boolean)
  - BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean,System.Boolean,System.Boolean)
  - BestHTTP.HTTPProxy.Address
  - BestHTTP.HTTPProxy.Credentials
  - BestHTTP.HTTPProxy.IsTransparent
  - BestHTTP.HTTPProxy.NonTransparentForHTTPS
  - BestHTTP.HTTPProxy.SendWholeUri
  langs:
  - csharp
  - vb
  name: HTTPProxy
  nameWithType: HTTPProxy
  fullName: BestHTTP.HTTPProxy
  type: Class
  source:
    id: HTTPProxy
    path: ''
    startLine: 3021
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  syntax:
    content: public sealed class HTTPProxy
    content.vb: Public NotInheritable Class HTTPProxy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: BestHTTP.HTTPProxy.Address
  commentId: P:BestHTTP.HTTPProxy.Address
  id: Address
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: HTTPProxy.Address
  fullName: BestHTTP.HTTPProxy.Address
  type: Property
  source:
    id: Address
    path: ''
    startLine: 3026
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  summary: "\nAddress of the proxy server. It has to be in the http://proxyaddress:port form.\n"
  example: []
  syntax:
    content: public Uri Address { get; set; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public Property Address As Uri
  overload: BestHTTP.HTTPProxy.Address*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.Credentials
  commentId: P:BestHTTP.HTTPProxy.Credentials
  id: Credentials
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: Credentials
  nameWithType: HTTPProxy.Credentials
  fullName: BestHTTP.HTTPProxy.Credentials
  type: Property
  source:
    id: Credentials
    path: ''
    startLine: 3031
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  summary: "\nCredentials of the proxy\n"
  example: []
  syntax:
    content: public Credentials Credentials { get; set; }
    parameters: []
    return:
      type: Credentials
    content.vb: Public Property Credentials As Credentials
  overload: BestHTTP.HTTPProxy.Credentials*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.IsTransparent
  commentId: P:BestHTTP.HTTPProxy.IsTransparent
  id: IsTransparent
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: IsTransparent
  nameWithType: HTTPProxy.IsTransparent
  fullName: BestHTTP.HTTPProxy.IsTransparent
  type: Property
  source:
    id: IsTransparent
    path: ''
    startLine: 3036
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  summary: "\nTrue if the proxy can act as a transparent proxy\n"
  example: []
  syntax:
    content: public bool IsTransparent { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsTransparent As Boolean
  overload: BestHTTP.HTTPProxy.IsTransparent*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.SendWholeUri
  commentId: P:BestHTTP.HTTPProxy.SendWholeUri
  id: SendWholeUri
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: SendWholeUri
  nameWithType: HTTPProxy.SendWholeUri
  fullName: BestHTTP.HTTPProxy.SendWholeUri
  type: Property
  source:
    id: SendWholeUri
    path: ''
    startLine: 3041
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  summary: "\nSome non-transparent proxies are except only the path and query of the request uri. Default value is true\n"
  example: []
  syntax:
    content: public bool SendWholeUri { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property SendWholeUri As Boolean
  overload: BestHTTP.HTTPProxy.SendWholeUri*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.NonTransparentForHTTPS
  commentId: P:BestHTTP.HTTPProxy.NonTransparentForHTTPS
  id: NonTransparentForHTTPS
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: NonTransparentForHTTPS
  nameWithType: HTTPProxy.NonTransparentForHTTPS
  fullName: BestHTTP.HTTPProxy.NonTransparentForHTTPS
  type: Property
  source:
    id: NonTransparentForHTTPS
    path: ''
    startLine: 3046
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  summary: "\nRegardless of the value of IsTransparent, for secure protocols(HTTPS://, WSS://) the plugin will use the proxy as an explicit proxy(will issue a CONNECT request to the proxy)\n"
  example: []
  syntax:
    content: public bool NonTransparentForHTTPS { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property NonTransparentForHTTPS As Boolean
  overload: BestHTTP.HTTPProxy.NonTransparentForHTTPS*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.#ctor(System.Uri)
  commentId: M:BestHTTP.HTTPProxy.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: HTTPProxy(Uri)
  nameWithType: HTTPProxy.HTTPProxy(Uri)
  fullName: BestHTTP.HTTPProxy.HTTPProxy(System.Uri)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3048
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  syntax:
    content: public HTTPProxy(Uri address)
    parameters:
    - id: address
      type: System.Uri
    content.vb: Public Sub New(address As Uri)
  overload: BestHTTP.HTTPProxy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials)
  commentId: M:BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials)
  id: '#ctor(System.Uri,Credentials)'
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: HTTPProxy(Uri, Credentials)
  nameWithType: HTTPProxy.HTTPProxy(Uri, Credentials)
  fullName: BestHTTP.HTTPProxy.HTTPProxy(System.Uri, Credentials)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3052
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  syntax:
    content: public HTTPProxy(Uri address, Credentials credentials)
    parameters:
    - id: address
      type: System.Uri
    - id: credentials
      type: Credentials
    content.vb: Public Sub New(address As Uri, credentials As Credentials)
  overload: BestHTTP.HTTPProxy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean)
  commentId: M:BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean)
  id: '#ctor(System.Uri,Credentials,System.Boolean)'
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: HTTPProxy(Uri, Credentials, Boolean)
  nameWithType: HTTPProxy.HTTPProxy(Uri, Credentials, Boolean)
  fullName: BestHTTP.HTTPProxy.HTTPProxy(System.Uri, Credentials, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3056
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  syntax:
    content: public HTTPProxy(Uri address, Credentials credentials, bool isTransparent)
    parameters:
    - id: address
      type: System.Uri
    - id: credentials
      type: Credentials
    - id: isTransparent
      type: System.Boolean
    content.vb: Public Sub New(address As Uri, credentials As Credentials, isTransparent As Boolean)
  overload: BestHTTP.HTTPProxy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean,System.Boolean)
  commentId: M:BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean,System.Boolean)
  id: '#ctor(System.Uri,Credentials,System.Boolean,System.Boolean)'
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: HTTPProxy(Uri, Credentials, Boolean, Boolean)
  nameWithType: HTTPProxy.HTTPProxy(Uri, Credentials, Boolean, Boolean)
  fullName: BestHTTP.HTTPProxy.HTTPProxy(System.Uri, Credentials, System.Boolean, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3060
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  syntax:
    content: public HTTPProxy(Uri address, Credentials credentials, bool isTransparent, bool sendWholeUri)
    parameters:
    - id: address
      type: System.Uri
    - id: credentials
      type: Credentials
    - id: isTransparent
      type: System.Boolean
    - id: sendWholeUri
      type: System.Boolean
    content.vb: Public Sub New(address As Uri, credentials As Credentials, isTransparent As Boolean, sendWholeUri As Boolean)
  overload: BestHTTP.HTTPProxy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:BestHTTP.HTTPProxy.#ctor(System.Uri,Credentials,System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Uri,Credentials,System.Boolean,System.Boolean,System.Boolean)'
  parent: BestHTTP.HTTPProxy
  langs:
  - csharp
  - vb
  name: HTTPProxy(Uri, Credentials, Boolean, Boolean, Boolean)
  nameWithType: HTTPProxy.HTTPProxy(Uri, Credentials, Boolean, Boolean, Boolean)
  fullName: BestHTTP.HTTPProxy.HTTPProxy(System.Uri, Credentials, System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3064
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP
  syntax:
    content: public HTTPProxy(Uri address, Credentials credentials, bool isTransparent, bool sendWholeUri, bool nonTransparentForHTTPS)
    parameters:
    - id: address
      type: System.Uri
    - id: credentials
      type: Credentials
    - id: isTransparent
      type: System.Boolean
    - id: sendWholeUri
      type: System.Boolean
    - id: nonTransparentForHTTPS
      type: System.Boolean
    content.vb: Public Sub New(address As Uri, credentials As Credentials, isTransparent As Boolean, sendWholeUri As Boolean, nonTransparentForHTTPS As Boolean)
  overload: BestHTTP.HTTPProxy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: BestHTTP
  commentId: N:BestHTTP
  name: BestHTTP
  nameWithType: BestHTTP
  fullName: BestHTTP
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BestHTTP.HTTPProxy.Address*
  commentId: Overload:BestHTTP.HTTPProxy.Address
  name: Address
  nameWithType: HTTPProxy.Address
  fullName: BestHTTP.HTTPProxy.Address
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: BestHTTP.HTTPProxy.Credentials*
  commentId: Overload:BestHTTP.HTTPProxy.Credentials
  name: Credentials
  nameWithType: HTTPProxy.Credentials
  fullName: BestHTTP.HTTPProxy.Credentials
- uid: Credentials
  isExternal: true
  name: Credentials
  nameWithType: Credentials
  fullName: Credentials
- uid: BestHTTP.HTTPProxy.IsTransparent*
  commentId: Overload:BestHTTP.HTTPProxy.IsTransparent
  name: IsTransparent
  nameWithType: HTTPProxy.IsTransparent
  fullName: BestHTTP.HTTPProxy.IsTransparent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BestHTTP.HTTPProxy.SendWholeUri*
  commentId: Overload:BestHTTP.HTTPProxy.SendWholeUri
  name: SendWholeUri
  nameWithType: HTTPProxy.SendWholeUri
  fullName: BestHTTP.HTTPProxy.SendWholeUri
- uid: BestHTTP.HTTPProxy.NonTransparentForHTTPS*
  commentId: Overload:BestHTTP.HTTPProxy.NonTransparentForHTTPS
  name: NonTransparentForHTTPS
  nameWithType: HTTPProxy.NonTransparentForHTTPS
  fullName: BestHTTP.HTTPProxy.NonTransparentForHTTPS
- uid: BestHTTP.HTTPProxy.#ctor*
  commentId: Overload:BestHTTP.HTTPProxy.#ctor
  name: HTTPProxy
  nameWithType: HTTPProxy.HTTPProxy
  fullName: BestHTTP.HTTPProxy.HTTPProxy
