### YamlMime:ManagedReference
items:
- uid: BestHTTP.SocketIO.SocketManager
  commentId: T:BestHTTP.SocketIO.SocketManager
  id: SocketManager
  parent: BestHTTP.SocketIO
  children:
  - BestHTTP.SocketIO.SocketManager.#ctor(System.Uri)
  - BestHTTP.SocketIO.SocketManager.#ctor(System.Uri,BestHTTP.SocketIO.SocketOptions)
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Close(System.Boolean)
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitAll(System.String,System.Object[])
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent(System.String,System.Object[])
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#OnPacket(BestHTTP.SocketIO.Packet)
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Remove(BestHTTP.SocketIO.Socket)
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#SendPacket(BestHTTP.SocketIO.Packet)
  - BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#TryToReconnect
  - BestHTTP.SocketIO.SocketManager.Close
  - BestHTTP.SocketIO.SocketManager.DefaultEncoder
  - BestHTTP.SocketIO.SocketManager.EmitAll(System.String,System.Object[])
  - BestHTTP.SocketIO.SocketManager.Encoder
  - BestHTTP.SocketIO.SocketManager.GetSocket
  - BestHTTP.SocketIO.SocketManager.GetSocket(System.String)
  - BestHTTP.SocketIO.SocketManager.Handshake
  - BestHTTP.SocketIO.SocketManager.Item(System.String)
  - BestHTTP.SocketIO.SocketManager.MinProtocolVersion
  - BestHTTP.SocketIO.SocketManager.Open
  - BestHTTP.SocketIO.SocketManager.Options
  - BestHTTP.SocketIO.SocketManager.ReconnectAttempts
  - BestHTTP.SocketIO.SocketManager.RequestCounter
  - BestHTTP.SocketIO.SocketManager.Socket
  - BestHTTP.SocketIO.SocketManager.State
  - BestHTTP.SocketIO.SocketManager.Transport
  - BestHTTP.SocketIO.SocketManager.Uri
  langs:
  - csharp
  - vb
  name: SocketManager
  nameWithType: SocketManager
  fullName: BestHTTP.SocketIO.SocketManager
  type: Class
  source:
    id: SocketManager
    path: ''
    startLine: 156650
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  syntax:
    content: 'public sealed class SocketManager : IHeartbeat, IManager'
    content.vb: >-
      Public NotInheritable Class SocketManager
          Inherits IHeartbeat
          Implements IManager
  inheritance:
  - System.Object
  implements:
  - BestHTTP.SocketIO.IManager
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: BestHTTP.SocketIO.SocketManager.DefaultEncoder
  commentId: F:BestHTTP.SocketIO.SocketManager.DefaultEncoder
  id: DefaultEncoder
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: DefaultEncoder
  nameWithType: SocketManager.DefaultEncoder
  fullName: BestHTTP.SocketIO.SocketManager.DefaultEncoder
  type: Field
  source:
    id: DefaultEncoder
    path: ''
    startLine: 156691
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe default Json encode/decoder that will be used to encode/decode the event arguments.\n"
  example: []
  syntax:
    content: public static IJsonEncoder DefaultEncoder
    return:
      type: IJsonEncoder
    content.vb: Public Shared DefaultEncoder As IJsonEncoder
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BestHTTP.SocketIO.SocketManager.MinProtocolVersion
  commentId: F:BestHTTP.SocketIO.SocketManager.MinProtocolVersion
  id: MinProtocolVersion
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: MinProtocolVersion
  nameWithType: SocketManager.MinProtocolVersion
  fullName: BestHTTP.SocketIO.SocketManager.MinProtocolVersion
  type: Field
  source:
    id: MinProtocolVersion
    path: ''
    startLine: 156696
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nSupported Socket.IO protocol version\n"
  example: []
  syntax:
    content: public const int MinProtocolVersion = 4
    return:
      type: System.Int32
    content.vb: Public Const MinProtocolVersion As Integer = 4
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: BestHTTP.SocketIO.SocketManager.State
  commentId: P:BestHTTP.SocketIO.SocketManager.State
  id: State
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: State
  nameWithType: SocketManager.State
  fullName: BestHTTP.SocketIO.SocketManager.State
  type: Property
  source:
    id: State
    path: ''
    startLine: 156703
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe current state of this Socket.IO manager.\n"
  example: []
  syntax:
    content: public SocketManager.States State { get; }
    parameters: []
    return:
      type: BestHTTP.SocketIO.SocketManager.States
    content.vb: Public ReadOnly Property State As SocketManager.States
  overload: BestHTTP.SocketIO.SocketManager.State*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.Options
  commentId: P:BestHTTP.SocketIO.SocketManager.Options
  id: Options
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: SocketManager.Options
  fullName: BestHTTP.SocketIO.SocketManager.Options
  type: Property
  source:
    id: Options
    path: ''
    startLine: 156709
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe SocketOptions instance that this manager will use.\n"
  example: []
  syntax:
    content: public SocketOptions Options { get; }
    parameters: []
    return:
      type: BestHTTP.SocketIO.SocketOptions
    content.vb: Public ReadOnly Property Options As SocketOptions
  overload: BestHTTP.SocketIO.SocketManager.Options*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.Uri
  commentId: P:BestHTTP.SocketIO.SocketManager.Uri
  id: Uri
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: SocketManager.Uri
  fullName: BestHTTP.SocketIO.SocketManager.Uri
  type: Property
  source:
    id: Uri
    path: ''
    startLine: 156714
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe Uri to the Socket.IO endpoint.\n"
  example: []
  syntax:
    content: public Uri Uri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public ReadOnly Property Uri As Uri
  overload: BestHTTP.SocketIO.SocketManager.Uri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.Handshake
  commentId: P:BestHTTP.SocketIO.SocketManager.Handshake
  id: Handshake
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Handshake
  nameWithType: SocketManager.Handshake
  fullName: BestHTTP.SocketIO.SocketManager.Handshake
  type: Property
  source:
    id: Handshake
    path: ''
    startLine: 156719
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe server sent and parsed Handshake data.\n"
  example: []
  syntax:
    content: public HandshakeData Handshake { get; }
    parameters: []
    return:
      type: BestHTTP.SocketIO.HandshakeData
    content.vb: Public ReadOnly Property Handshake As HandshakeData
  overload: BestHTTP.SocketIO.SocketManager.Handshake*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.Transport
  commentId: P:BestHTTP.SocketIO.SocketManager.Transport
  id: Transport
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Transport
  nameWithType: SocketManager.Transport
  fullName: BestHTTP.SocketIO.SocketManager.Transport
  type: Property
  source:
    id: Transport
    path: ''
    startLine: 156724
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe currently used main transport instance.\n"
  example: []
  syntax:
    content: public ITransport Transport { get; }
    parameters: []
    return:
      type: ITransport
    content.vb: Public ReadOnly Property Transport As ITransport
  overload: BestHTTP.SocketIO.SocketManager.Transport*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.RequestCounter
  commentId: P:BestHTTP.SocketIO.SocketManager.RequestCounter
  id: RequestCounter
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: RequestCounter
  nameWithType: SocketManager.RequestCounter
  fullName: BestHTTP.SocketIO.SocketManager.RequestCounter
  type: Property
  source:
    id: RequestCounter
    path: ''
    startLine: 156729
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe Request counter for request-based transports.\n"
  example: []
  syntax:
    content: public ulong RequestCounter { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property RequestCounter As ULong
  overload: BestHTTP.SocketIO.SocketManager.RequestCounter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.Socket
  commentId: P:BestHTTP.SocketIO.SocketManager.Socket
  id: Socket
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Socket
  nameWithType: SocketManager.Socket
  fullName: BestHTTP.SocketIO.SocketManager.Socket
  type: Property
  source:
    id: Socket
    path: ''
    startLine: 156734
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe root(&quot;/&quot;) Socket.\n"
  example: []
  syntax:
    content: public Socket Socket { get; }
    parameters: []
    return:
      type: BestHTTP.SocketIO.Socket
    content.vb: Public ReadOnly Property Socket As Socket
  overload: BestHTTP.SocketIO.SocketManager.Socket*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.Item(System.String)
  commentId: P:BestHTTP.SocketIO.SocketManager.Item(System.String)
  id: Item(System.String)
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: SocketManager.Item[String]
  fullName: BestHTTP.SocketIO.SocketManager.Item[System.String]
  type: Property
  source:
    id: this[]
    path: ''
    startLine: 156739
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nIndexer to access socket associated to the given namespace.\n"
  example: []
  syntax:
    content: public Socket this[string nsp] { get; }
    parameters:
    - id: nsp
      type: System.String
    return:
      type: BestHTTP.SocketIO.Socket
    content.vb: Public ReadOnly Property Item(nsp As String) As Socket
  overload: BestHTTP.SocketIO.SocketManager.Item*
  nameWithType.vb: SocketManager.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BestHTTP.SocketIO.SocketManager.Item(System.String)
  name.vb: Item(String)
- uid: BestHTTP.SocketIO.SocketManager.ReconnectAttempts
  commentId: P:BestHTTP.SocketIO.SocketManager.ReconnectAttempts
  id: ReconnectAttempts
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: ReconnectAttempts
  nameWithType: SocketManager.ReconnectAttempts
  fullName: BestHTTP.SocketIO.SocketManager.ReconnectAttempts
  type: Property
  source:
    id: ReconnectAttempts
    path: ''
    startLine: 156744
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nHow many reconnect attempts made.\n"
  example: []
  syntax:
    content: public int ReconnectAttempts { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ReconnectAttempts As Integer
  overload: BestHTTP.SocketIO.SocketManager.ReconnectAttempts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BestHTTP.SocketIO.SocketManager.Encoder
  commentId: P:BestHTTP.SocketIO.SocketManager.Encoder
  id: Encoder
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Encoder
  nameWithType: SocketManager.Encoder
  fullName: BestHTTP.SocketIO.SocketManager.Encoder
  type: Property
  source:
    id: Encoder
    path: ''
    startLine: 156749
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThe JSon encoder that will be used to encode the sent data to json and decode the received json to an object list.\n"
  example: []
  syntax:
    content: public IJsonEncoder Encoder { get; set; }
    parameters: []
    return:
      type: IJsonEncoder
    content.vb: Public Property Encoder As IJsonEncoder
  overload: BestHTTP.SocketIO.SocketManager.Encoder*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.SocketIO.SocketManager.#ctor(System.Uri)
  commentId: M:BestHTTP.SocketIO.SocketManager.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: SocketManager(Uri)
  nameWithType: SocketManager.SocketManager(Uri)
  fullName: BestHTTP.SocketIO.SocketManager.SocketManager(System.Uri)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 156827
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nConstructor to create a SocketManager instance that will connect to the given uri.\n"
  example: []
  syntax:
    content: public SocketManager(Uri uri)
    parameters:
    - id: uri
      type: System.Uri
    content.vb: Public Sub New(uri As Uri)
  overload: BestHTTP.SocketIO.SocketManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.SocketIO.SocketManager.#ctor(System.Uri,BestHTTP.SocketIO.SocketOptions)
  commentId: M:BestHTTP.SocketIO.SocketManager.#ctor(System.Uri,BestHTTP.SocketIO.SocketOptions)
  id: '#ctor(System.Uri,BestHTTP.SocketIO.SocketOptions)'
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: SocketManager(Uri, SocketOptions)
  nameWithType: SocketManager.SocketManager(Uri, SocketOptions)
  fullName: BestHTTP.SocketIO.SocketManager.SocketManager(System.Uri, BestHTTP.SocketIO.SocketOptions)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 156836
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nConstructor to create a SocketManager instance.\n"
  example: []
  syntax:
    content: public SocketManager(Uri uri, SocketOptions options)
    parameters:
    - id: uri
      type: System.Uri
    - id: options
      type: BestHTTP.SocketIO.SocketOptions
    content.vb: Public Sub New(uri As Uri, options As SocketOptions)
  overload: BestHTTP.SocketIO.SocketManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.SocketIO.SocketManager.GetSocket
  commentId: M:BestHTTP.SocketIO.SocketManager.GetSocket
  id: GetSocket
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: GetSocket()
  nameWithType: SocketManager.GetSocket()
  fullName: BestHTTP.SocketIO.SocketManager.GetSocket()
  type: Method
  source:
    id: GetSocket
    path: ''
    startLine: 156850
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nReturns with the &quot;/&quot; namespace, the same as the Socket property.\n"
  example: []
  syntax:
    content: public Socket GetSocket()
    return:
      type: BestHTTP.SocketIO.Socket
    content.vb: Public Function GetSocket As Socket
  overload: BestHTTP.SocketIO.SocketManager.GetSocket*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.SocketIO.SocketManager.GetSocket(System.String)
  commentId: M:BestHTTP.SocketIO.SocketManager.GetSocket(System.String)
  id: GetSocket(System.String)
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: GetSocket(String)
  nameWithType: SocketManager.GetSocket(String)
  fullName: BestHTTP.SocketIO.SocketManager.GetSocket(System.String)
  type: Method
  source:
    id: GetSocket
    path: ''
    startLine: 156858
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nReturns with the specified namespace\n"
  example: []
  syntax:
    content: public Socket GetSocket(string nsp)
    parameters:
    - id: nsp
      type: System.String
    return:
      type: BestHTTP.SocketIO.Socket
    content.vb: Public Function GetSocket(nsp As String) As Socket
  overload: BestHTTP.SocketIO.SocketManager.GetSocket*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Remove(BestHTTP.SocketIO.Socket)
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Remove(BestHTTP.SocketIO.Socket)
  id: BestHTTP#SocketIO#IManager#Remove(BestHTTP.SocketIO.Socket)
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.Remove(Socket)
  nameWithType: SocketManager.IManager.Remove(Socket)
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.Remove(BestHTTP.SocketIO.Socket)
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.Remove
    path: ''
    startLine: 156885
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nInternal function to remove a Socket instance from this manager.\n"
  example: []
  syntax:
    content: void IManager.Remove(Socket socket)
    parameters:
    - id: socket
      type: BestHTTP.SocketIO.Socket
      description: ''
    content.vb: Sub BestHTTP.SocketIO.IManager.Remove(socket As Socket) Implements IManager.Remove
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Remove*
  implements:
  - BestHTTP.SocketIO.IManager.Remove(BestHTTP.SocketIO.Socket)
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.Remove(Socket)
  name.vb: BestHTTP.SocketIO.IManager.Remove(Socket)
- uid: BestHTTP.SocketIO.SocketManager.Open
  commentId: M:BestHTTP.SocketIO.SocketManager.Open
  id: Open
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Open()
  nameWithType: SocketManager.Open()
  fullName: BestHTTP.SocketIO.SocketManager.Open()
  type: Method
  source:
    id: Open
    path: ''
    startLine: 156900
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nThis function will begin to open the Socket.IO connection by sending out the handshake request.\nIf the Options&apos; AutoConnect is true, it will be called automatically.\n"
  example: []
  syntax:
    content: public void Open()
    content.vb: Public Sub Open
  overload: BestHTTP.SocketIO.SocketManager.Open*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.SocketIO.SocketManager.Close
  commentId: M:BestHTTP.SocketIO.SocketManager.Close
  id: Close
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: SocketManager.Close()
  fullName: BestHTTP.SocketIO.SocketManager.Close()
  type: Method
  source:
    id: Close
    path: ''
    startLine: 156936
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nCloses this Socket.IO connection.\n"
  example: []
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  overload: BestHTTP.SocketIO.SocketManager.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Close(System.Boolean)
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Close(System.Boolean)
  id: BestHTTP#SocketIO#IManager#Close(System.Boolean)
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.Close(Boolean)
  nameWithType: SocketManager.IManager.Close(Boolean)
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.Close(System.Boolean)
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.Close
    path: ''
    startLine: 156944
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nCloses this Socket.IO connection.\n"
  example: []
  syntax:
    content: void IManager.Close(bool removeSockets)
    parameters:
    - id: removeSockets
      type: System.Boolean
    content.vb: Sub BestHTTP.SocketIO.IManager.Close(removeSockets As Boolean) Implements IManager.Close
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Close*
  implements:
  - BestHTTP.SocketIO.IManager.Close(System.Boolean)
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.Close(Boolean)
  name.vb: BestHTTP.SocketIO.IManager.Close(Boolean)
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#TryToReconnect
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#TryToReconnect
  id: BestHTTP#SocketIO#IManager#TryToReconnect
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.TryToReconnect()
  nameWithType: SocketManager.IManager.TryToReconnect()
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.TryToReconnect()
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.TryToReconnect
    path: ''
    startLine: 156986
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nCalled from a ITransport implementation when an error occurs and we may have to try to reconnect.\n"
  example: []
  syntax:
    content: void IManager.TryToReconnect()
    content.vb: Sub BestHTTP.SocketIO.IManager.TryToReconnect Implements IManager.TryToReconnect
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#TryToReconnect*
  implements:
  - BestHTTP.SocketIO.IManager.TryToReconnect
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.TryToReconnect()
  name.vb: BestHTTP.SocketIO.IManager.TryToReconnect()
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#SendPacket(BestHTTP.SocketIO.Packet)
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#SendPacket(BestHTTP.SocketIO.Packet)
  id: BestHTTP#SocketIO#IManager#SendPacket(BestHTTP.SocketIO.Packet)
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.SendPacket(Packet)
  nameWithType: SocketManager.IManager.SendPacket(Packet)
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.SendPacket(BestHTTP.SocketIO.Packet)
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.SendPacket
    path: ''
    startLine: 157118
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nInternal function that called from the Socket class. It will send out the packet instantly, or if no transport is available it will store\nthe packet in the OfflinePackets list.\n"
  example: []
  syntax:
    content: void IManager.SendPacket(Packet packet)
    parameters:
    - id: packet
      type: BestHTTP.SocketIO.Packet
    content.vb: Sub BestHTTP.SocketIO.IManager.SendPacket(packet As Packet) Implements IManager.SendPacket
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#SendPacket*
  implements:
  - BestHTTP.SocketIO.IManager.SendPacket(BestHTTP.SocketIO.Packet)
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.SendPacket(Packet)
  name.vb: BestHTTP.SocketIO.IManager.SendPacket(Packet)
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#OnPacket(BestHTTP.SocketIO.Packet)
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#OnPacket(BestHTTP.SocketIO.Packet)
  id: BestHTTP#SocketIO#IManager#OnPacket(BestHTTP.SocketIO.Packet)
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.OnPacket(Packet)
  nameWithType: SocketManager.IManager.OnPacket(Packet)
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.OnPacket(BestHTTP.SocketIO.Packet)
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.OnPacket
    path: ''
    startLine: 157146
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nCalled from the currently operating Transport. Will pass forward to the Socket that has to call the callbacks.\n"
  example: []
  syntax:
    content: void IManager.OnPacket(Packet packet)
    parameters:
    - id: packet
      type: BestHTTP.SocketIO.Packet
    content.vb: Sub BestHTTP.SocketIO.IManager.OnPacket(packet As Packet) Implements IManager.OnPacket
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#OnPacket*
  implements:
  - BestHTTP.SocketIO.IManager.OnPacket(BestHTTP.SocketIO.Packet)
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.OnPacket(Packet)
  name.vb: BestHTTP.SocketIO.IManager.OnPacket(Packet)
- uid: BestHTTP.SocketIO.SocketManager.EmitAll(System.String,System.Object[])
  commentId: M:BestHTTP.SocketIO.SocketManager.EmitAll(System.String,System.Object[])
  id: EmitAll(System.String,System.Object[])
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: EmitAll(String, Object[])
  nameWithType: SocketManager.EmitAll(String, Object[])
  fullName: BestHTTP.SocketIO.SocketManager.EmitAll(System.String, System.Object[])
  type: Method
  source:
    id: EmitAll
    path: ''
    startLine: 157187
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nSends an event to all available namespaces.\n"
  example: []
  syntax:
    content: public void EmitAll(string eventName, params object[] args)
    parameters:
    - id: eventName
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub EmitAll(eventName As String, ParamArray args As Object())
  overload: BestHTTP.SocketIO.SocketManager.EmitAll*
  nameWithType.vb: SocketManager.EmitAll(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BestHTTP.SocketIO.SocketManager.EmitAll(System.String, System.Object())
  name.vb: EmitAll(String, Object())
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent(System.String,System.Object[])
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent(System.String,System.Object[])
  id: BestHTTP#SocketIO#IManager#EmitEvent(System.String,System.Object[])
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.EmitEvent(String, Object[])
  nameWithType: SocketManager.IManager.EmitEvent(String, Object[])
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitEvent(System.String, System.Object[])
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.EmitEvent
    path: ''
    startLine: 157196
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nEmits an internal packet-less event to the root namespace without creating it if it isn&apos;t exists yet.\n"
  example: []
  syntax:
    content: void IManager.EmitEvent(string eventName, params object[] args)
    parameters:
    - id: eventName
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Sub BestHTTP.SocketIO.IManager.EmitEvent(eventName As String, ParamArray args As Object()) Implements IManager.EmitEvent
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent*
  implements:
  - BestHTTP.SocketIO.IManager.EmitEvent(System.String,System.Object[])
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.EmitEvent(String, Object())
  fullName.vb: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitEvent(System.String, System.Object())
  name.vb: BestHTTP.SocketIO.IManager.EmitEvent(String, Object())
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
  id: BestHTTP#SocketIO#IManager#EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.EmitEvent(SocketIOEventTypes, Object[])
  nameWithType: SocketManager.IManager.EmitEvent(SocketIOEventTypes, Object[])
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes, System.Object[])
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.EmitEvent
    path: ''
    startLine: 157206
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  summary: "\nEmits an internal packet-less event to the root namespace without creating it if it isn&apos;t exists yet.\n"
  example: []
  syntax:
    content: void IManager.EmitEvent(SocketIOEventTypes type, params object[] args)
    parameters:
    - id: type
      type: BestHTTP.SocketIO.SocketIOEventTypes
    - id: args
      type: System.Object[]
    content.vb: Sub BestHTTP.SocketIO.IManager.EmitEvent(type As SocketIOEventTypes, ParamArray args As Object()) Implements IManager.EmitEvent
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent*
  implements:
  - BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.EmitEvent(SocketIOEventTypes, Object())
  fullName.vb: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes, System.Object())
  name.vb: BestHTTP.SocketIO.IManager.EmitEvent(SocketIOEventTypes, Object())
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
  id: BestHTTP#SocketIO#IManager#EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.EmitError(SocketIOErrors, String)
  nameWithType: SocketManager.IManager.EmitError(SocketIOErrors, String)
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitError(BestHTTP.SocketIO.SocketIOErrors, System.String)
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.EmitError
    path: ''
    startLine: 157211
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  syntax:
    content: void IManager.EmitError(SocketIOErrors errCode, string msg)
    parameters:
    - id: errCode
      type: BestHTTP.SocketIO.SocketIOErrors
    - id: msg
      type: System.String
    content.vb: Sub BestHTTP.SocketIO.IManager.EmitError(errCode As SocketIOErrors, msg As String) Implements IManager.EmitError
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitError*
  implements:
  - BestHTTP.SocketIO.IManager.EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.EmitError(SocketIOErrors, String)
  name.vb: BestHTTP.SocketIO.IManager.EmitError(SocketIOErrors, String)
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitAll(System.String,System.Object[])
  commentId: M:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitAll(System.String,System.Object[])
  id: BestHTTP#SocketIO#IManager#EmitAll(System.String,System.Object[])
  isEii: true
  parent: BestHTTP.SocketIO.SocketManager
  langs:
  - csharp
  - vb
  name: IManager.EmitAll(String, Object[])
  nameWithType: SocketManager.IManager.EmitAll(String, Object[])
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitAll(System.String, System.Object[])
  type: Method
  source:
    id: BestHTTP.SocketIO.IManager.EmitAll
    path: ''
    startLine: 157216
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.SocketIO
  syntax:
    content: void IManager.EmitAll(string eventName, params object[] args)
    parameters:
    - id: eventName
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Sub BestHTTP.SocketIO.IManager.EmitAll(eventName As String, ParamArray args As Object()) Implements IManager.EmitAll
  overload: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitAll*
  implements:
  - BestHTTP.SocketIO.IManager.EmitAll(System.String,System.Object[])
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.EmitAll(String, Object())
  fullName.vb: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitAll(System.String, System.Object())
  name.vb: BestHTTP.SocketIO.IManager.EmitAll(String, Object())
references:
- uid: BestHTTP.SocketIO
  commentId: N:BestHTTP.SocketIO
  name: BestHTTP.SocketIO
  nameWithType: BestHTTP.SocketIO
  fullName: BestHTTP.SocketIO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BestHTTP.SocketIO.IManager
  commentId: T:BestHTTP.SocketIO.IManager
  parent: BestHTTP.SocketIO
  name: IManager
  nameWithType: IManager
  fullName: BestHTTP.SocketIO.IManager
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: IJsonEncoder
  isExternal: true
  name: IJsonEncoder
  nameWithType: IJsonEncoder
  fullName: IJsonEncoder
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: BestHTTP.SocketIO.SocketManager.State*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.State
  name: State
  nameWithType: SocketManager.State
  fullName: BestHTTP.SocketIO.SocketManager.State
- uid: BestHTTP.SocketIO.SocketManager.States
  commentId: T:BestHTTP.SocketIO.SocketManager.States
  parent: BestHTTP.SocketIO
  name: SocketManager.States
  nameWithType: SocketManager.States
  fullName: BestHTTP.SocketIO.SocketManager.States
- uid: BestHTTP.SocketIO.SocketManager.Options*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Options
  name: Options
  nameWithType: SocketManager.Options
  fullName: BestHTTP.SocketIO.SocketManager.Options
- uid: BestHTTP.SocketIO.SocketOptions
  commentId: T:BestHTTP.SocketIO.SocketOptions
  parent: BestHTTP.SocketIO
  name: SocketOptions
  nameWithType: SocketOptions
  fullName: BestHTTP.SocketIO.SocketOptions
- uid: BestHTTP.SocketIO.SocketManager.Uri*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Uri
  name: Uri
  nameWithType: SocketManager.Uri
  fullName: BestHTTP.SocketIO.SocketManager.Uri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: BestHTTP.SocketIO.SocketManager.Handshake*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Handshake
  name: Handshake
  nameWithType: SocketManager.Handshake
  fullName: BestHTTP.SocketIO.SocketManager.Handshake
- uid: BestHTTP.SocketIO.HandshakeData
  commentId: T:BestHTTP.SocketIO.HandshakeData
  parent: BestHTTP.SocketIO
  name: HandshakeData
  nameWithType: HandshakeData
  fullName: BestHTTP.SocketIO.HandshakeData
- uid: BestHTTP.SocketIO.SocketManager.Transport*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Transport
  name: Transport
  nameWithType: SocketManager.Transport
  fullName: BestHTTP.SocketIO.SocketManager.Transport
- uid: ITransport
  commentId: '!:ITransport'
  isExternal: true
  name: ITransport
  nameWithType: ITransport
  fullName: ITransport
- uid: BestHTTP.SocketIO.SocketManager.RequestCounter*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.RequestCounter
  name: RequestCounter
  nameWithType: SocketManager.RequestCounter
  fullName: BestHTTP.SocketIO.SocketManager.RequestCounter
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: BestHTTP.SocketIO.SocketManager.Socket*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Socket
  name: Socket
  nameWithType: SocketManager.Socket
  fullName: BestHTTP.SocketIO.SocketManager.Socket
- uid: BestHTTP.SocketIO.Socket
  commentId: T:BestHTTP.SocketIO.Socket
  parent: BestHTTP.SocketIO
  name: Socket
  nameWithType: Socket
  fullName: BestHTTP.SocketIO.Socket
- uid: BestHTTP.SocketIO.SocketManager.Item*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Item
  name: Item
  nameWithType: SocketManager.Item
  fullName: BestHTTP.SocketIO.SocketManager.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BestHTTP.SocketIO.SocketManager.ReconnectAttempts*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.ReconnectAttempts
  name: ReconnectAttempts
  nameWithType: SocketManager.ReconnectAttempts
  fullName: BestHTTP.SocketIO.SocketManager.ReconnectAttempts
- uid: BestHTTP.SocketIO.SocketManager.Encoder*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Encoder
  name: Encoder
  nameWithType: SocketManager.Encoder
  fullName: BestHTTP.SocketIO.SocketManager.Encoder
- uid: BestHTTP.SocketIO.SocketManager.#ctor*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.#ctor
  name: SocketManager
  nameWithType: SocketManager.SocketManager
  fullName: BestHTTP.SocketIO.SocketManager.SocketManager
- uid: BestHTTP.SocketIO.SocketManager.GetSocket*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.GetSocket
  name: GetSocket
  nameWithType: SocketManager.GetSocket
  fullName: BestHTTP.SocketIO.SocketManager.GetSocket
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Remove*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Remove
  name: IManager.Remove
  nameWithType: SocketManager.IManager.Remove
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.Remove
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.Remove
  name.vb: BestHTTP.SocketIO.IManager.Remove
- uid: BestHTTP.SocketIO.IManager.Remove(BestHTTP.SocketIO.Socket)
  commentId: M:BestHTTP.SocketIO.IManager.Remove(BestHTTP.SocketIO.Socket)
  parent: BestHTTP.SocketIO.IManager
  name: Remove(Socket)
  nameWithType: IManager.Remove(Socket)
  fullName: BestHTTP.SocketIO.IManager.Remove(BestHTTP.SocketIO.Socket)
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.Remove(BestHTTP.SocketIO.Socket)
    name: Remove
    nameWithType: IManager.Remove
    fullName: BestHTTP.SocketIO.IManager.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.Socket
    name: Socket
    nameWithType: Socket
    fullName: BestHTTP.SocketIO.Socket
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.Remove(BestHTTP.SocketIO.Socket)
    name: Remove
    nameWithType: IManager.Remove
    fullName: BestHTTP.SocketIO.IManager.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.Socket
    name: Socket
    nameWithType: Socket
    fullName: BestHTTP.SocketIO.Socket
  - name: )
    nameWithType: )
    fullName: )
- uid: BestHTTP.SocketIO.SocketManager.Open*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Open
  name: Open
  nameWithType: SocketManager.Open
  fullName: BestHTTP.SocketIO.SocketManager.Open
- uid: BestHTTP.SocketIO.SocketManager.Close*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.Close
  name: Close
  nameWithType: SocketManager.Close
  fullName: BestHTTP.SocketIO.SocketManager.Close
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Close*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#Close
  name: IManager.Close
  nameWithType: SocketManager.IManager.Close
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.Close
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.Close
  name.vb: BestHTTP.SocketIO.IManager.Close
- uid: BestHTTP.SocketIO.IManager.Close(System.Boolean)
  commentId: M:BestHTTP.SocketIO.IManager.Close(System.Boolean)
  parent: BestHTTP.SocketIO.IManager
  isExternal: true
  name: Close(Boolean)
  nameWithType: IManager.Close(Boolean)
  fullName: BestHTTP.SocketIO.IManager.Close(System.Boolean)
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.Close(System.Boolean)
    name: Close
    nameWithType: IManager.Close
    fullName: BestHTTP.SocketIO.IManager.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.Close(System.Boolean)
    name: Close
    nameWithType: IManager.Close
    fullName: BestHTTP.SocketIO.IManager.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#TryToReconnect*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#TryToReconnect
  name: IManager.TryToReconnect
  nameWithType: SocketManager.IManager.TryToReconnect
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.TryToReconnect
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.TryToReconnect
  name.vb: BestHTTP.SocketIO.IManager.TryToReconnect
- uid: BestHTTP.SocketIO.IManager.TryToReconnect
  commentId: M:BestHTTP.SocketIO.IManager.TryToReconnect
  parent: BestHTTP.SocketIO.IManager
  name: TryToReconnect()
  nameWithType: IManager.TryToReconnect()
  fullName: BestHTTP.SocketIO.IManager.TryToReconnect()
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.TryToReconnect
    name: TryToReconnect
    nameWithType: IManager.TryToReconnect
    fullName: BestHTTP.SocketIO.IManager.TryToReconnect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.TryToReconnect
    name: TryToReconnect
    nameWithType: IManager.TryToReconnect
    fullName: BestHTTP.SocketIO.IManager.TryToReconnect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#SendPacket*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#SendPacket
  name: IManager.SendPacket
  nameWithType: SocketManager.IManager.SendPacket
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.SendPacket
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.SendPacket
  name.vb: BestHTTP.SocketIO.IManager.SendPacket
- uid: BestHTTP.SocketIO.IManager.SendPacket(BestHTTP.SocketIO.Packet)
  commentId: M:BestHTTP.SocketIO.IManager.SendPacket(BestHTTP.SocketIO.Packet)
  parent: BestHTTP.SocketIO.IManager
  name: SendPacket(Packet)
  nameWithType: IManager.SendPacket(Packet)
  fullName: BestHTTP.SocketIO.IManager.SendPacket(BestHTTP.SocketIO.Packet)
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.SendPacket(BestHTTP.SocketIO.Packet)
    name: SendPacket
    nameWithType: IManager.SendPacket
    fullName: BestHTTP.SocketIO.IManager.SendPacket
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.Packet
    name: Packet
    nameWithType: Packet
    fullName: BestHTTP.SocketIO.Packet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.SendPacket(BestHTTP.SocketIO.Packet)
    name: SendPacket
    nameWithType: IManager.SendPacket
    fullName: BestHTTP.SocketIO.IManager.SendPacket
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.Packet
    name: Packet
    nameWithType: Packet
    fullName: BestHTTP.SocketIO.Packet
  - name: )
    nameWithType: )
    fullName: )
- uid: BestHTTP.SocketIO.Packet
  commentId: T:BestHTTP.SocketIO.Packet
  parent: BestHTTP.SocketIO
  name: Packet
  nameWithType: Packet
  fullName: BestHTTP.SocketIO.Packet
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#OnPacket*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#OnPacket
  name: IManager.OnPacket
  nameWithType: SocketManager.IManager.OnPacket
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.OnPacket
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.OnPacket
  name.vb: BestHTTP.SocketIO.IManager.OnPacket
- uid: BestHTTP.SocketIO.IManager.OnPacket(BestHTTP.SocketIO.Packet)
  commentId: M:BestHTTP.SocketIO.IManager.OnPacket(BestHTTP.SocketIO.Packet)
  parent: BestHTTP.SocketIO.IManager
  name: OnPacket(Packet)
  nameWithType: IManager.OnPacket(Packet)
  fullName: BestHTTP.SocketIO.IManager.OnPacket(BestHTTP.SocketIO.Packet)
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.OnPacket(BestHTTP.SocketIO.Packet)
    name: OnPacket
    nameWithType: IManager.OnPacket
    fullName: BestHTTP.SocketIO.IManager.OnPacket
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.Packet
    name: Packet
    nameWithType: Packet
    fullName: BestHTTP.SocketIO.Packet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.OnPacket(BestHTTP.SocketIO.Packet)
    name: OnPacket
    nameWithType: IManager.OnPacket
    fullName: BestHTTP.SocketIO.IManager.OnPacket
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.Packet
    name: Packet
    nameWithType: Packet
    fullName: BestHTTP.SocketIO.Packet
  - name: )
    nameWithType: )
    fullName: )
- uid: BestHTTP.SocketIO.SocketManager.EmitAll*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.EmitAll
  name: EmitAll
  nameWithType: SocketManager.EmitAll
  fullName: BestHTTP.SocketIO.SocketManager.EmitAll
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitEvent
  name: IManager.EmitEvent
  nameWithType: SocketManager.IManager.EmitEvent
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitEvent
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.EmitEvent
  name.vb: BestHTTP.SocketIO.IManager.EmitEvent
- uid: BestHTTP.SocketIO.IManager.EmitEvent(System.String,System.Object[])
  commentId: M:BestHTTP.SocketIO.IManager.EmitEvent(System.String,System.Object[])
  parent: BestHTTP.SocketIO.IManager
  isExternal: true
  name: EmitEvent(String, Object[])
  nameWithType: IManager.EmitEvent(String, Object[])
  fullName: BestHTTP.SocketIO.IManager.EmitEvent(System.String, System.Object[])
  nameWithType.vb: IManager.EmitEvent(String, Object())
  fullName.vb: BestHTTP.SocketIO.IManager.EmitEvent(System.String, System.Object())
  name.vb: EmitEvent(String, Object())
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.EmitEvent(System.String,System.Object[])
    name: EmitEvent
    nameWithType: IManager.EmitEvent
    fullName: BestHTTP.SocketIO.IManager.EmitEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.EmitEvent(System.String,System.Object[])
    name: EmitEvent
    nameWithType: IManager.EmitEvent
    fullName: BestHTTP.SocketIO.IManager.EmitEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
  commentId: M:BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
  parent: BestHTTP.SocketIO.IManager
  isExternal: true
  name: EmitEvent(SocketIOEventTypes, Object[])
  nameWithType: IManager.EmitEvent(SocketIOEventTypes, Object[])
  fullName: BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes, System.Object[])
  nameWithType.vb: IManager.EmitEvent(SocketIOEventTypes, Object())
  fullName.vb: BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes, System.Object())
  name.vb: EmitEvent(SocketIOEventTypes, Object())
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
    name: EmitEvent
    nameWithType: IManager.EmitEvent
    fullName: BestHTTP.SocketIO.IManager.EmitEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.SocketIOEventTypes
    name: SocketIOEventTypes
    nameWithType: SocketIOEventTypes
    fullName: BestHTTP.SocketIO.SocketIOEventTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.EmitEvent(BestHTTP.SocketIO.SocketIOEventTypes,System.Object[])
    name: EmitEvent
    nameWithType: IManager.EmitEvent
    fullName: BestHTTP.SocketIO.IManager.EmitEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.SocketIOEventTypes
    name: SocketIOEventTypes
    nameWithType: SocketIOEventTypes
    fullName: BestHTTP.SocketIO.SocketIOEventTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BestHTTP.SocketIO.SocketIOEventTypes
  commentId: T:BestHTTP.SocketIO.SocketIOEventTypes
  parent: BestHTTP.SocketIO
  name: SocketIOEventTypes
  nameWithType: SocketIOEventTypes
  fullName: BestHTTP.SocketIO.SocketIOEventTypes
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitError*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitError
  name: IManager.EmitError
  nameWithType: SocketManager.IManager.EmitError
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitError
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.EmitError
  name.vb: BestHTTP.SocketIO.IManager.EmitError
- uid: BestHTTP.SocketIO.IManager.EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
  commentId: M:BestHTTP.SocketIO.IManager.EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
  parent: BestHTTP.SocketIO.IManager
  isExternal: true
  name: EmitError(SocketIOErrors, String)
  nameWithType: IManager.EmitError(SocketIOErrors, String)
  fullName: BestHTTP.SocketIO.IManager.EmitError(BestHTTP.SocketIO.SocketIOErrors, System.String)
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
    name: EmitError
    nameWithType: IManager.EmitError
    fullName: BestHTTP.SocketIO.IManager.EmitError
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.SocketIOErrors
    name: SocketIOErrors
    nameWithType: SocketIOErrors
    fullName: BestHTTP.SocketIO.SocketIOErrors
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.EmitError(BestHTTP.SocketIO.SocketIOErrors,System.String)
    name: EmitError
    nameWithType: IManager.EmitError
    fullName: BestHTTP.SocketIO.IManager.EmitError
  - name: (
    nameWithType: (
    fullName: (
  - uid: BestHTTP.SocketIO.SocketIOErrors
    name: SocketIOErrors
    nameWithType: SocketIOErrors
    fullName: BestHTTP.SocketIO.SocketIOErrors
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BestHTTP.SocketIO.SocketIOErrors
  commentId: T:BestHTTP.SocketIO.SocketIOErrors
  parent: BestHTTP.SocketIO
  name: SocketIOErrors
  nameWithType: SocketIOErrors
  fullName: BestHTTP.SocketIO.SocketIOErrors
- uid: BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitAll*
  commentId: Overload:BestHTTP.SocketIO.SocketManager.BestHTTP#SocketIO#IManager#EmitAll
  name: IManager.EmitAll
  nameWithType: SocketManager.IManager.EmitAll
  fullName: BestHTTP.SocketIO.SocketManager.BestHTTP.SocketIO.IManager.EmitAll
  nameWithType.vb: SocketManager.BestHTTP.SocketIO.IManager.EmitAll
  name.vb: BestHTTP.SocketIO.IManager.EmitAll
- uid: BestHTTP.SocketIO.IManager.EmitAll(System.String,System.Object[])
  commentId: M:BestHTTP.SocketIO.IManager.EmitAll(System.String,System.Object[])
  parent: BestHTTP.SocketIO.IManager
  isExternal: true
  name: EmitAll(String, Object[])
  nameWithType: IManager.EmitAll(String, Object[])
  fullName: BestHTTP.SocketIO.IManager.EmitAll(System.String, System.Object[])
  nameWithType.vb: IManager.EmitAll(String, Object())
  fullName.vb: BestHTTP.SocketIO.IManager.EmitAll(System.String, System.Object())
  name.vb: EmitAll(String, Object())
  spec.csharp:
  - uid: BestHTTP.SocketIO.IManager.EmitAll(System.String,System.Object[])
    name: EmitAll
    nameWithType: IManager.EmitAll
    fullName: BestHTTP.SocketIO.IManager.EmitAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BestHTTP.SocketIO.IManager.EmitAll(System.String,System.Object[])
    name: EmitAll
    nameWithType: IManager.EmitAll
    fullName: BestHTTP.SocketIO.IManager.EmitAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
