### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Crypto.Prng.IRandomGenerator
  commentId: T:Org.BouncyCastle.Crypto.Prng.IRandomGenerator
  id: IRandomGenerator
  parent: Org.BouncyCastle.Crypto.Prng
  children:
  - Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])
  - Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)
  - Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])
  - Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: IRandomGenerator
  nameWithType: IRandomGenerator
  fullName: Org.BouncyCastle.Crypto.Prng.IRandomGenerator
  type: Interface
  source:
    id: IRandomGenerator
    path: ''
    startLine: 45119
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Prng
  remarks: Generic interface for objects generating random bytes.
  example: []
  syntax:
    content: public interface IRandomGenerator
    content.vb: Public Interface IRandomGenerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])
  commentId: M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])
  id: AddSeedMaterial(System.Byte[])
  parent: Org.BouncyCastle.Crypto.Prng.IRandomGenerator
  langs:
  - csharp
  - vb
  name: AddSeedMaterial(Byte[])
  nameWithType: IRandomGenerator.AddSeedMaterial(Byte[])
  fullName: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])
  type: Method
  source:
    id: AddSeedMaterial
    path: ''
    startLine: 45123
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Prng
  summary: Add more seed material to the generator.
  example: []
  syntax:
    content: void AddSeedMaterial(byte[] seed)
    parameters:
    - id: seed
      type: System.Byte[]
      description: A byte array to be mixed into the generator&apos;s state.
    content.vb: Sub AddSeedMaterial(seed As Byte())
  overload: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial*
  nameWithType.vb: IRandomGenerator.AddSeedMaterial(Byte())
  fullName.vb: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte())
  name.vb: AddSeedMaterial(Byte())
- uid: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)
  commentId: M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)
  id: AddSeedMaterial(System.Int64)
  parent: Org.BouncyCastle.Crypto.Prng.IRandomGenerator
  langs:
  - csharp
  - vb
  name: AddSeedMaterial(Int64)
  nameWithType: IRandomGenerator.AddSeedMaterial(Int64)
  fullName: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)
  type: Method
  source:
    id: AddSeedMaterial
    path: ''
    startLine: 45127
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Prng
  summary: Add more seed material to the generator.
  example: []
  syntax:
    content: void AddSeedMaterial(long seed)
    parameters:
    - id: seed
      type: System.Int64
      description: A long value to be mixed into the generator&apos;s state.
    content.vb: Sub AddSeedMaterial(seed As Long)
  overload: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial*
- uid: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])
  commentId: M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])
  id: NextBytes(System.Byte[])
  parent: Org.BouncyCastle.Crypto.Prng.IRandomGenerator
  langs:
  - csharp
  - vb
  name: NextBytes(Byte[])
  nameWithType: IRandomGenerator.NextBytes(Byte[])
  fullName: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])
  type: Method
  source:
    id: NextBytes
    path: ''
    startLine: 45131
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Prng
  summary: Fill byte array with random values.
  example: []
  syntax:
    content: void NextBytes(byte[] bytes)
    parameters:
    - id: bytes
      type: System.Byte[]
      description: Array to be filled.
    content.vb: Sub NextBytes(bytes As Byte())
  overload: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes*
  nameWithType.vb: IRandomGenerator.NextBytes(Byte())
  fullName.vb: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte())
  name.vb: NextBytes(Byte())
- uid: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)
  commentId: M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)
  id: NextBytes(System.Byte[],System.Int32,System.Int32)
  parent: Org.BouncyCastle.Crypto.Prng.IRandomGenerator
  langs:
  - csharp
  - vb
  name: NextBytes(Byte[], Int32, Int32)
  nameWithType: IRandomGenerator.NextBytes(Byte[], Int32, Int32)
  fullName: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    id: NextBytes
    path: ''
    startLine: 45137
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Prng
  summary: Fill byte array with random values.
  example: []
  syntax:
    content: void NextBytes(byte[] bytes, int start, int len)
    parameters:
    - id: bytes
      type: System.Byte[]
      description: Array to receive bytes.
    - id: start
      type: System.Int32
      description: Index to start filling at.
    - id: len
      type: System.Int32
      description: Length of segment to fill.
    content.vb: Sub NextBytes(bytes As Byte(), start As Integer, len As Integer)
  overload: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes*
  nameWithType.vb: IRandomGenerator.NextBytes(Byte(), Int32, Int32)
  fullName.vb: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte(), System.Int32, System.Int32)
  name.vb: NextBytes(Byte(), Int32, Int32)
references:
- uid: Org.BouncyCastle.Crypto.Prng
  commentId: N:Org.BouncyCastle.Crypto.Prng
  name: Org.BouncyCastle.Crypto.Prng
  nameWithType: Org.BouncyCastle.Crypto.Prng
  fullName: Org.BouncyCastle.Crypto.Prng
- uid: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial*
  commentId: Overload:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial
  name: AddSeedMaterial
  nameWithType: IRandomGenerator.AddSeedMaterial
  fullName: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes*
  commentId: Overload:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes
  name: NextBytes
  nameWithType: IRandomGenerator.NextBytes
  fullName: Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
