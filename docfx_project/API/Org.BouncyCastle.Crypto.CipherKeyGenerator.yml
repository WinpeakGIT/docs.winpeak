### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator
  commentId: T:Org.BouncyCastle.Crypto.CipherKeyGenerator
  id: CipherKeyGenerator
  parent: Org.BouncyCastle.Crypto
  children:
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.#ctor
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.random
  - Org.BouncyCastle.Crypto.CipherKeyGenerator.strength
  langs:
  - csharp
  - vb
  name: CipherKeyGenerator
  nameWithType: CipherKeyGenerator
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator
  type: Class
  source:
    id: CipherKeyGenerator
    path: ''
    startLine: 99696
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  example: []
  syntax:
    content: public class CipherKeyGenerator
    content.vb: Public Class CipherKeyGenerator
  inheritance:
  - System.Object
  derivedClasses:
  - Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.random
  commentId: F:Org.BouncyCastle.Crypto.CipherKeyGenerator.random
  id: random
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: random
  nameWithType: CipherKeyGenerator.random
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.random
  type: Field
  source:
    id: random
    path: ''
    startLine: 99698
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: protected SecureRandom random
    return:
      type: SecureRandom
    content.vb: Protected random As SecureRandom
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.strength
  commentId: F:Org.BouncyCastle.Crypto.CipherKeyGenerator.strength
  id: strength
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: strength
  nameWithType: CipherKeyGenerator.strength
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.strength
  type: Field
  source:
    id: strength
    path: ''
    startLine: 99699
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: protected int strength
    return:
      type: System.Int32
    content.vb: Protected strength As Integer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.#ctor
  commentId: M:Org.BouncyCastle.Crypto.CipherKeyGenerator.#ctor
  id: '#ctor'
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: CipherKeyGenerator()
  nameWithType: CipherKeyGenerator.CipherKeyGenerator()
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.CipherKeyGenerator()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 99703
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: public CipherKeyGenerator()
    content.vb: Public Sub New
  overload: Org.BouncyCastle.Crypto.CipherKeyGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength
  commentId: P:Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength
  id: DefaultStrength
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: DefaultStrength
  nameWithType: CipherKeyGenerator.DefaultStrength
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength
  type: Property
  source:
    id: DefaultStrength
    path: ''
    startLine: 99716
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: public int DefaultStrength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DefaultStrength As Integer
  overload: Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  commentId: M:Org.BouncyCastle.Crypto.CipherKeyGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  id: Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: Init(KeyGenerationParameters)
  nameWithType: CipherKeyGenerator.Init(KeyGenerationParameters)
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  type: Method
  source:
    id: Init
    path: ''
    startLine: 99726
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  example: []
  syntax:
    content: public void Init(KeyGenerationParameters parameters)
    parameters:
    - id: parameters
      type: Org.BouncyCastle.Crypto.KeyGenerationParameters
    content.vb: Public Sub Init(parameters As KeyGenerationParameters)
  overload: Org.BouncyCastle.Crypto.CipherKeyGenerator.Init*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  commentId: M:Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  id: engineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: engineInit(KeyGenerationParameters)
  nameWithType: CipherKeyGenerator.engineInit(KeyGenerationParameters)
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)
  type: Method
  source:
    id: engineInit
    path: ''
    startLine: 99737
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: protected virtual void engineInit(KeyGenerationParameters parameters)
    parameters:
    - id: parameters
      type: Org.BouncyCastle.Crypto.KeyGenerationParameters
    content.vb: Protected Overridable Sub engineInit(parameters As KeyGenerationParameters)
  overload: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey
  commentId: M:Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey
  id: GenerateKey
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: GenerateKey()
  nameWithType: CipherKeyGenerator.GenerateKey()
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey()
  type: Method
  source:
    id: GenerateKey
    path: ''
    startLine: 99749
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  example: []
  syntax:
    content: public byte[] GenerateKey()
    return:
      type: System.Byte[]
    content.vb: Public Function GenerateKey As Byte()
  overload: Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey
  commentId: M:Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey
  id: engineGenerateKey
  parent: Org.BouncyCastle.Crypto.CipherKeyGenerator
  langs:
  - csharp
  - vb
  name: engineGenerateKey()
  nameWithType: CipherKeyGenerator.engineGenerateKey()
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey()
  type: Method
  source:
    id: engineGenerateKey
    path: ''
    startLine: 99764
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  syntax:
    content: protected virtual byte[] engineGenerateKey()
    return:
      type: System.Byte[]
    content.vb: Protected Overridable Function engineGenerateKey As Byte()
  overload: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Org.BouncyCastle.Crypto
  commentId: N:Org.BouncyCastle.Crypto
  name: Org.BouncyCastle.Crypto
  nameWithType: Org.BouncyCastle.Crypto
  fullName: Org.BouncyCastle.Crypto
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SecureRandom
  isExternal: true
  name: SecureRandom
  nameWithType: SecureRandom
  fullName: SecureRandom
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.#ctor*
  commentId: Overload:Org.BouncyCastle.Crypto.CipherKeyGenerator.#ctor
  name: CipherKeyGenerator
  nameWithType: CipherKeyGenerator.CipherKeyGenerator
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.CipherKeyGenerator
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength*
  commentId: Overload:Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength
  name: DefaultStrength
  nameWithType: CipherKeyGenerator.DefaultStrength
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.Init*
  commentId: Overload:Org.BouncyCastle.Crypto.CipherKeyGenerator.Init
  name: Init
  nameWithType: CipherKeyGenerator.Init
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.Init
- uid: Org.BouncyCastle.Crypto.KeyGenerationParameters
  commentId: T:Org.BouncyCastle.Crypto.KeyGenerationParameters
  parent: Org.BouncyCastle.Crypto
  name: KeyGenerationParameters
  nameWithType: KeyGenerationParameters
  fullName: Org.BouncyCastle.Crypto.KeyGenerationParameters
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit*
  commentId: Overload:Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit
  name: engineInit
  nameWithType: CipherKeyGenerator.engineInit
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineInit
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey*
  commentId: Overload:Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey
  name: GenerateKey
  nameWithType: CipherKeyGenerator.GenerateKey
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey*
  commentId: Overload:Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey
  name: engineGenerateKey
  nameWithType: CipherKeyGenerator.engineGenerateKey
  fullName: Org.BouncyCastle.Crypto.CipherKeyGenerator.engineGenerateKey
