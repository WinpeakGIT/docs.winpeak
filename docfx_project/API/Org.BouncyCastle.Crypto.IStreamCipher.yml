### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Crypto.IStreamCipher
  commentId: T:Org.BouncyCastle.Crypto.IStreamCipher
  id: IStreamCipher
  parent: Org.BouncyCastle.Crypto
  children:
  - Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName
  - Org.BouncyCastle.Crypto.IStreamCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  - Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - Org.BouncyCastle.Crypto.IStreamCipher.Reset
  - Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte(System.Byte)
  langs:
  - csharp
  - vb
  name: IStreamCipher
  nameWithType: IStreamCipher
  fullName: Org.BouncyCastle.Crypto.IStreamCipher
  type: Interface
  source:
    id: IStreamCipher
    path: ''
    startLine: 99604
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  summary: The interface stream ciphers conform to.
  example: []
  syntax:
    content: public interface IStreamCipher
    content.vb: Public Interface IStreamCipher
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName
  commentId: P:Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName
  id: AlgorithmName
  parent: Org.BouncyCastle.Crypto.IStreamCipher
  langs:
  - csharp
  - vb
  name: AlgorithmName
  nameWithType: IStreamCipher.AlgorithmName
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName
  type: Property
  source:
    id: AlgorithmName
    path: ''
    startLine: 99607
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  summary: The name of the algorithm this cipher implements.
  example: []
  syntax:
    content: string AlgorithmName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property AlgorithmName As String
  overload: Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Org.BouncyCastle.Crypto.IStreamCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  commentId: M:Org.BouncyCastle.Crypto.IStreamCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  id: Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)
  parent: Org.BouncyCastle.Crypto.IStreamCipher
  langs:
  - csharp
  - vb
  name: Init(Boolean, ICipherParameters)
  nameWithType: IStreamCipher.Init(Boolean, ICipherParameters)
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.Init(System.Boolean, Org.BouncyCastle.Crypto.ICipherParameters)
  type: Method
  source:
    id: Init
    path: ''
    startLine: 99616
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  summary: Initialise the cipher.
  example: []
  syntax:
    content: void Init(bool forEncryption, ICipherParameters parameters)
    parameters:
    - id: forEncryption
      type: System.Boolean
      description: >-
        If true the cipher is initialised for encryption,

        if false for decryption.
    - id: parameters
      type: Org.BouncyCastle.Crypto.ICipherParameters
      description: The key and other data required by the cipher.
    content.vb: Sub Init(forEncryption As Boolean, parameters As ICipherParameters)
  overload: Org.BouncyCastle.Crypto.IStreamCipher.Init*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf the parameters argument is inappropriate.\n"
- uid: Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte(System.Byte)
  commentId: M:Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte(System.Byte)
  id: ReturnByte(System.Byte)
  parent: Org.BouncyCastle.Crypto.IStreamCipher
  langs:
  - csharp
  - vb
  name: ReturnByte(Byte)
  nameWithType: IStreamCipher.ReturnByte(Byte)
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte(System.Byte)
  type: Method
  source:
    id: ReturnByte
    path: ''
    startLine: 99621
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  summary: encrypt/decrypt a single byte returning the result.
  example: []
  syntax:
    content: byte ReturnByte(byte input)
    parameters:
    - id: input
      type: System.Byte
      description: the byte to be processed.
    return:
      type: System.Byte
      description: the result of processing the input byte.
    content.vb: Function ReturnByte(input As Byte) As Byte
  overload: Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte*
- uid: Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: Org.BouncyCastle.Crypto.IStreamCipher
  langs:
  - csharp
  - vb
  name: ProcessBytes(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType: IStreamCipher.ProcessBytes(Byte[], Int32, Int32, Byte[], Int32)
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    id: ProcessBytes
    path: ''
    startLine: 99636
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  summary: "\nProcess a block of bytes from <code>input</code> putting the result into <code>output</code>.\n"
  example: []
  syntax:
    content: void ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
    parameters:
    - id: input
      type: System.Byte[]
      description: The input byte array.
    - id: inOff
      type: System.Int32
      description: "\nThe offset into <code>input</code> where the data to be processed starts.\n"
    - id: length
      type: System.Int32
      description: The number of bytes to be processed.
    - id: output
      type: System.Byte[]
      description: The output buffer the processed bytes go into.
    - id: outOff
      type: System.Int32
      description: "\nThe offset into <code>output</code> the processed data starts at.\n"
    content.vb: Sub ProcessBytes(input As Byte(), inOff As Integer, length As Integer, output As Byte(), outOff As Integer)
  overload: Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes*
  exceptions:
  - type: Org.BouncyCastle.Crypto.DataLengthException
    commentId: T:Org.BouncyCastle.Crypto.DataLengthException
    description: If the output buffer is too small.
  nameWithType.vb: IStreamCipher.ProcessBytes(Byte(), Int32, Int32, Byte(), Int32)
  fullName.vb: Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: ProcessBytes(Byte(), Int32, Int32, Byte(), Int32)
- uid: Org.BouncyCastle.Crypto.IStreamCipher.Reset
  commentId: M:Org.BouncyCastle.Crypto.IStreamCipher.Reset
  id: Reset
  parent: Org.BouncyCastle.Crypto.IStreamCipher
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: IStreamCipher.Reset()
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.Reset()
  type: Method
  source:
    id: Reset
    path: ''
    startLine: 99641
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto
  summary: "\nReset the cipher to the same state as it was after the last init (if there was one).\n"
  example: []
  syntax:
    content: void Reset()
    content.vb: Sub Reset
  overload: Org.BouncyCastle.Crypto.IStreamCipher.Reset*
references:
- uid: Org.BouncyCastle.Crypto
  commentId: N:Org.BouncyCastle.Crypto
  name: Org.BouncyCastle.Crypto
  nameWithType: Org.BouncyCastle.Crypto
  fullName: Org.BouncyCastle.Crypto
- uid: Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName*
  commentId: Overload:Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName
  name: AlgorithmName
  nameWithType: IStreamCipher.AlgorithmName
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Org.BouncyCastle.Crypto.IStreamCipher.Init*
  commentId: Overload:Org.BouncyCastle.Crypto.IStreamCipher.Init
  name: Init
  nameWithType: IStreamCipher.Init
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.Init
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Org.BouncyCastle.Crypto.ICipherParameters
  commentId: T:Org.BouncyCastle.Crypto.ICipherParameters
  parent: Org.BouncyCastle.Crypto
  name: ICipherParameters
  nameWithType: ICipherParameters
  fullName: Org.BouncyCastle.Crypto.ICipherParameters
- uid: Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte*
  commentId: Overload:Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte
  name: ReturnByte
  nameWithType: IStreamCipher.ReturnByte
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Org.BouncyCastle.Crypto.DataLengthException
  commentId: T:Org.BouncyCastle.Crypto.DataLengthException
  parent: Org.BouncyCastle.Crypto
  name: DataLengthException
  nameWithType: DataLengthException
  fullName: Org.BouncyCastle.Crypto.DataLengthException
- uid: Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes*
  commentId: Overload:Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes
  name: ProcessBytes
  nameWithType: IStreamCipher.ProcessBytes
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Org.BouncyCastle.Crypto.IStreamCipher.Reset*
  commentId: Overload:Org.BouncyCastle.Crypto.IStreamCipher.Reset
  name: Reset
  nameWithType: IStreamCipher.Reset
  fullName: Org.BouncyCastle.Crypto.IStreamCipher.Reset
