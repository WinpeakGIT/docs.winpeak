### YamlMime:ManagedReference
items:
- uid: BestHTTP.Forms.HTTPFieldData
  commentId: T:BestHTTP.Forms.HTTPFieldData
  id: HTTPFieldData
  parent: BestHTTP.Forms
  children:
  - BestHTTP.Forms.HTTPFieldData.Binary
  - BestHTTP.Forms.HTTPFieldData.Encoding
  - BestHTTP.Forms.HTTPFieldData.FileName
  - BestHTTP.Forms.HTTPFieldData.MimeType
  - BestHTTP.Forms.HTTPFieldData.Name
  - BestHTTP.Forms.HTTPFieldData.Payload
  - BestHTTP.Forms.HTTPFieldData.Text
  langs:
  - csharp
  - vb
  name: HTTPFieldData
  nameWithType: HTTPFieldData
  fullName: BestHTTP.Forms.HTTPFieldData
  type: Class
  source:
    id: HTTPFieldData
    path: ''
    startLine: 163017
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nThis class represents a HTTP Form&apos;s field.\n"
  example: []
  syntax:
    content: public class HTTPFieldData
    content.vb: Public Class HTTPFieldData
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BestHTTP.Forms.HTTPFieldData.Name
  commentId: P:BestHTTP.Forms.HTTPFieldData.Name
  id: Name
  parent: BestHTTP.Forms.HTTPFieldData
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: HTTPFieldData.Name
  fullName: BestHTTP.Forms.HTTPFieldData.Name
  type: Property
  source:
    id: Name
    path: ''
    startLine: 163022
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nThe form&apos;s field.\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: BestHTTP.Forms.HTTPFieldData.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.Forms.HTTPFieldData.FileName
  commentId: P:BestHTTP.Forms.HTTPFieldData.FileName
  id: FileName
  parent: BestHTTP.Forms.HTTPFieldData
  langs:
  - csharp
  - vb
  name: FileName
  nameWithType: HTTPFieldData.FileName
  fullName: BestHTTP.Forms.HTTPFieldData.FileName
  type: Property
  source:
    id: FileName
    path: ''
    startLine: 163027
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nFilename of the field. Optional.\n"
  example: []
  syntax:
    content: public string FileName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FileName As String
  overload: BestHTTP.Forms.HTTPFieldData.FileName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.Forms.HTTPFieldData.MimeType
  commentId: P:BestHTTP.Forms.HTTPFieldData.MimeType
  id: MimeType
  parent: BestHTTP.Forms.HTTPFieldData
  langs:
  - csharp
  - vb
  name: MimeType
  nameWithType: HTTPFieldData.MimeType
  fullName: BestHTTP.Forms.HTTPFieldData.MimeType
  type: Property
  source:
    id: MimeType
    path: ''
    startLine: 163032
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nMime-type of the field. Optional\n"
  example: []
  syntax:
    content: public string MimeType { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property MimeType As String
  overload: BestHTTP.Forms.HTTPFieldData.MimeType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.Forms.HTTPFieldData.Encoding
  commentId: P:BestHTTP.Forms.HTTPFieldData.Encoding
  id: Encoding
  parent: BestHTTP.Forms.HTTPFieldData
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: HTTPFieldData.Encoding
  fullName: BestHTTP.Forms.HTTPFieldData.Encoding
  type: Property
  source:
    id: Encoding
    path: ''
    startLine: 163037
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nEncoding of the data. Optional\n"
  example: []
  syntax:
    content: public Encoding Encoding { get; set; }
    parameters: []
    return:
      type: Encoding
    content.vb: Public Property Encoding As Encoding
  overload: BestHTTP.Forms.HTTPFieldData.Encoding*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.Forms.HTTPFieldData.Text
  commentId: P:BestHTTP.Forms.HTTPFieldData.Text
  id: Text
  parent: BestHTTP.Forms.HTTPFieldData
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: HTTPFieldData.Text
  fullName: BestHTTP.Forms.HTTPFieldData.Text
  type: Property
  source:
    id: Text
    path: ''
    startLine: 163042
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nThe field&apos;s textual data.\n"
  example: []
  syntax:
    content: public string Text { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Text As String
  overload: BestHTTP.Forms.HTTPFieldData.Text*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.Forms.HTTPFieldData.Binary
  commentId: P:BestHTTP.Forms.HTTPFieldData.Binary
  id: Binary
  parent: BestHTTP.Forms.HTTPFieldData
  langs:
  - csharp
  - vb
  name: Binary
  nameWithType: HTTPFieldData.Binary
  fullName: BestHTTP.Forms.HTTPFieldData.Binary
  type: Property
  source:
    id: Binary
    path: ''
    startLine: 163047
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nThe field&apos;s binary data.\n"
  example: []
  syntax:
    content: public byte[] Binary { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Property Binary As Byte()
  overload: BestHTTP.Forms.HTTPFieldData.Binary*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BestHTTP.Forms.HTTPFieldData.Payload
  commentId: P:BestHTTP.Forms.HTTPFieldData.Payload
  id: Payload
  parent: BestHTTP.Forms.HTTPFieldData
  langs:
  - csharp
  - vb
  name: Payload
  nameWithType: HTTPFieldData.Payload
  fullName: BestHTTP.Forms.HTTPFieldData.Payload
  type: Property
  source:
    id: Payload
    path: ''
    startLine: 163052
  assemblies:
  - cs.temp.dll
  namespace: BestHTTP.Forms
  summary: "\nWill return with the binary data, or if it&apos;s not present the textual data will be decoded to binary.\n"
  example: []
  syntax:
    content: public byte[] Payload { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property Payload As Byte()
  overload: BestHTTP.Forms.HTTPFieldData.Payload*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: BestHTTP.Forms
  commentId: N:BestHTTP.Forms
  name: BestHTTP.Forms
  nameWithType: BestHTTP.Forms
  fullName: BestHTTP.Forms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BestHTTP.Forms.HTTPFieldData.Name*
  commentId: Overload:BestHTTP.Forms.HTTPFieldData.Name
  name: Name
  nameWithType: HTTPFieldData.Name
  fullName: BestHTTP.Forms.HTTPFieldData.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BestHTTP.Forms.HTTPFieldData.FileName*
  commentId: Overload:BestHTTP.Forms.HTTPFieldData.FileName
  name: FileName
  nameWithType: HTTPFieldData.FileName
  fullName: BestHTTP.Forms.HTTPFieldData.FileName
- uid: BestHTTP.Forms.HTTPFieldData.MimeType*
  commentId: Overload:BestHTTP.Forms.HTTPFieldData.MimeType
  name: MimeType
  nameWithType: HTTPFieldData.MimeType
  fullName: BestHTTP.Forms.HTTPFieldData.MimeType
- uid: BestHTTP.Forms.HTTPFieldData.Encoding*
  commentId: Overload:BestHTTP.Forms.HTTPFieldData.Encoding
  name: Encoding
  nameWithType: HTTPFieldData.Encoding
  fullName: BestHTTP.Forms.HTTPFieldData.Encoding
- uid: Encoding
  commentId: '!:Encoding'
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: Encoding
- uid: BestHTTP.Forms.HTTPFieldData.Text*
  commentId: Overload:BestHTTP.Forms.HTTPFieldData.Text
  name: Text
  nameWithType: HTTPFieldData.Text
  fullName: BestHTTP.Forms.HTTPFieldData.Text
- uid: BestHTTP.Forms.HTTPFieldData.Binary*
  commentId: Overload:BestHTTP.Forms.HTTPFieldData.Binary
  name: Binary
  nameWithType: HTTPFieldData.Binary
  fullName: BestHTTP.Forms.HTTPFieldData.Binary
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BestHTTP.Forms.HTTPFieldData.Payload*
  commentId: Overload:BestHTTP.Forms.HTTPFieldData.Payload
  name: Payload
  nameWithType: HTTPFieldData.Payload
  fullName: BestHTTP.Forms.HTTPFieldData.Payload
