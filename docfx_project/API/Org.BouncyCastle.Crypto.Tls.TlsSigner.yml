### YamlMime:ManagedReference
items:
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsSigner
  id: TlsSigner
  parent: Org.BouncyCastle.Crypto.Tls
  children:
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.Init(Org.BouncyCastle.Crypto.Tls.TlsContext)
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  - Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  langs:
  - csharp
  - vb
  name: TlsSigner
  nameWithType: TlsSigner
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner
  type: Interface
  source:
    id: TlsSigner
    path: ''
    startLine: 115986
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: public interface TlsSigner
    content.vb: Public Interface TlsSigner
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.Init(Org.BouncyCastle.Crypto.Tls.TlsContext)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.Init(Org.BouncyCastle.Crypto.Tls.TlsContext)
  id: Init(Org.BouncyCastle.Crypto.Tls.TlsContext)
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: Init(TlsContext)
  nameWithType: TlsSigner.Init(TlsContext)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.Init(Org.BouncyCastle.Crypto.Tls.TlsContext)
  type: Method
  source:
    id: Init
    path: ''
    startLine: 115988
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: void Init(TlsContext context)
    parameters:
    - id: context
      type: Org.BouncyCastle.Crypto.Tls.TlsContext
    content.vb: Sub Init(context As TlsContext)
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.Init*
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  id: GenerateRawSignature(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: GenerateRawSignature(AsymmetricKeyParameter, Byte[])
  nameWithType: TlsSigner.GenerateRawSignature(AsymmetricKeyParameter, Byte[])
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte[])
  type: Method
  source:
    id: GenerateRawSignature
    path: ''
    startLine: 115990
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: byte[] GenerateRawSignature(AsymmetricKeyParameter privateKey, byte[] md5AndSha1)
    parameters:
    - id: privateKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    - id: md5AndSha1
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Function GenerateRawSignature(privateKey As AsymmetricKeyParameter, md5AndSha1 As Byte()) As Byte()
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature*
  nameWithType.vb: TlsSigner.GenerateRawSignature(AsymmetricKeyParameter, Byte())
  fullName.vb: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte())
  name.vb: GenerateRawSignature(AsymmetricKeyParameter, Byte())
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  id: GenerateRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: GenerateRawSignature(SignatureAndHashAlgorithm, AsymmetricKeyParameter, Byte[])
  nameWithType: TlsSigner.GenerateRawSignature(SignatureAndHashAlgorithm, AsymmetricKeyParameter, Byte[])
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm, Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte[])
  type: Method
  source:
    id: GenerateRawSignature
    path: ''
    startLine: 115992
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash)
    parameters:
    - id: algorithm
      type: Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm
    - id: privateKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    - id: hash
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Function GenerateRawSignature(algorithm As SignatureAndHashAlgorithm, privateKey As AsymmetricKeyParameter, hash As Byte()) As Byte()
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature*
  nameWithType.vb: TlsSigner.GenerateRawSignature(SignatureAndHashAlgorithm, AsymmetricKeyParameter, Byte())
  fullName.vb: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm, Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte())
  name.vb: GenerateRawSignature(SignatureAndHashAlgorithm, AsymmetricKeyParameter, Byte())
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  id: VerifyRawSignature(System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: VerifyRawSignature(Byte[], AsymmetricKeyParameter, Byte[])
  nameWithType: TlsSigner.VerifyRawSignature(Byte[], AsymmetricKeyParameter, Byte[])
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(System.Byte[], Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte[])
  type: Method
  source:
    id: VerifyRawSignature
    path: ''
    startLine: 115995
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: bool VerifyRawSignature(byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] md5AndSha1)
    parameters:
    - id: sigBytes
      type: System.Byte[]
    - id: publicKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    - id: md5AndSha1
      type: System.Byte[]
    return:
      type: System.Boolean
    content.vb: Function VerifyRawSignature(sigBytes As Byte(), publicKey As AsymmetricKeyParameter, md5AndSha1 As Byte()) As Boolean
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature*
  nameWithType.vb: TlsSigner.VerifyRawSignature(Byte(), AsymmetricKeyParameter, Byte())
  fullName.vb: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(System.Byte(), Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte())
  name.vb: VerifyRawSignature(Byte(), AsymmetricKeyParameter, Byte())
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  id: VerifyRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: VerifyRawSignature(SignatureAndHashAlgorithm, Byte[], AsymmetricKeyParameter, Byte[])
  nameWithType: TlsSigner.VerifyRawSignature(SignatureAndHashAlgorithm, Byte[], AsymmetricKeyParameter, Byte[])
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm, System.Byte[], Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte[])
  type: Method
  source:
    id: VerifyRawSignature
    path: ''
    startLine: 115997
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash)
    parameters:
    - id: algorithm
      type: Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm
    - id: sigBytes
      type: System.Byte[]
    - id: publicKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    - id: hash
      type: System.Byte[]
    return:
      type: System.Boolean
    content.vb: Function VerifyRawSignature(algorithm As SignatureAndHashAlgorithm, sigBytes As Byte(), publicKey As AsymmetricKeyParameter, hash As Byte()) As Boolean
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature*
  nameWithType.vb: TlsSigner.VerifyRawSignature(SignatureAndHashAlgorithm, Byte(), AsymmetricKeyParameter, Byte())
  fullName.vb: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm, System.Byte(), Org.BouncyCastle.Crypto.AsymmetricKeyParameter, System.Byte())
  name.vb: VerifyRawSignature(SignatureAndHashAlgorithm, Byte(), AsymmetricKeyParameter, Byte())
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  id: CreateSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: CreateSigner(AsymmetricKeyParameter)
  nameWithType: TlsSigner.CreateSigner(AsymmetricKeyParameter)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  type: Method
  source:
    id: CreateSigner
    path: ''
    startLine: 116000
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: ISigner CreateSigner(AsymmetricKeyParameter privateKey)
    parameters:
    - id: privateKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    return:
      type: Org.BouncyCastle.Crypto.ISigner
    content.vb: Function CreateSigner(privateKey As AsymmetricKeyParameter) As ISigner
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner*
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  id: CreateSigner(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: CreateSigner(SignatureAndHashAlgorithm, AsymmetricKeyParameter)
  nameWithType: TlsSigner.CreateSigner(SignatureAndHashAlgorithm, AsymmetricKeyParameter)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm, Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  type: Method
  source:
    id: CreateSigner
    path: ''
    startLine: 116002
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey)
    parameters:
    - id: algorithm
      type: Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm
    - id: privateKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    return:
      type: Org.BouncyCastle.Crypto.ISigner
    content.vb: Function CreateSigner(algorithm As SignatureAndHashAlgorithm, privateKey As AsymmetricKeyParameter) As ISigner
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner*
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  id: CreateVerifyer(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: CreateVerifyer(AsymmetricKeyParameter)
  nameWithType: TlsSigner.CreateVerifyer(AsymmetricKeyParameter)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  type: Method
  source:
    id: CreateVerifyer
    path: ''
    startLine: 116004
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: ISigner CreateVerifyer(AsymmetricKeyParameter publicKey)
    parameters:
    - id: publicKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    return:
      type: Org.BouncyCastle.Crypto.ISigner
    content.vb: Function CreateVerifyer(publicKey As AsymmetricKeyParameter) As ISigner
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer*
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  id: CreateVerifyer(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: CreateVerifyer(SignatureAndHashAlgorithm, AsymmetricKeyParameter)
  nameWithType: TlsSigner.CreateVerifyer(SignatureAndHashAlgorithm, AsymmetricKeyParameter)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer(Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm, Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  type: Method
  source:
    id: CreateVerifyer
    path: ''
    startLine: 116006
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey)
    parameters:
    - id: algorithm
      type: Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm
    - id: publicKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    return:
      type: Org.BouncyCastle.Crypto.ISigner
    content.vb: Function CreateVerifyer(algorithm As SignatureAndHashAlgorithm, publicKey As AsymmetricKeyParameter) As ISigner
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer*
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  commentId: M:Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  id: IsValidPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  parent: Org.BouncyCastle.Crypto.Tls.TlsSigner
  langs:
  - csharp
  - vb
  name: IsValidPublicKey(AsymmetricKeyParameter)
  nameWithType: TlsSigner.IsValidPublicKey(AsymmetricKeyParameter)
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)
  type: Method
  source:
    id: IsValidPublicKey
    path: ''
    startLine: 116008
  assemblies:
  - cs.temp.dll
  namespace: Org.BouncyCastle.Crypto.Tls
  syntax:
    content: bool IsValidPublicKey(AsymmetricKeyParameter publicKey)
    parameters:
    - id: publicKey
      type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
    return:
      type: System.Boolean
    content.vb: Function IsValidPublicKey(publicKey As AsymmetricKeyParameter) As Boolean
  overload: Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey*
references:
- uid: Org.BouncyCastle.Crypto.Tls
  commentId: N:Org.BouncyCastle.Crypto.Tls
  name: Org.BouncyCastle.Crypto.Tls
  nameWithType: Org.BouncyCastle.Crypto.Tls
  fullName: Org.BouncyCastle.Crypto.Tls
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.Init*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsSigner.Init
  name: Init
  nameWithType: TlsSigner.Init
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.Init
- uid: Org.BouncyCastle.Crypto.Tls.TlsContext
  commentId: T:Org.BouncyCastle.Crypto.Tls.TlsContext
  parent: Org.BouncyCastle.Crypto.Tls
  name: TlsContext
  nameWithType: TlsContext
  fullName: Org.BouncyCastle.Crypto.Tls.TlsContext
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature
  name: GenerateRawSignature
  nameWithType: TlsSigner.GenerateRawSignature
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.GenerateRawSignature
- uid: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
  commentId: T:Org.BouncyCastle.Crypto.AsymmetricKeyParameter
  parent: Org.BouncyCastle.Crypto
  name: AsymmetricKeyParameter
  nameWithType: AsymmetricKeyParameter
  fullName: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Org.BouncyCastle.Crypto
  commentId: N:Org.BouncyCastle.Crypto
  name: Org.BouncyCastle.Crypto
  nameWithType: Org.BouncyCastle.Crypto
  fullName: Org.BouncyCastle.Crypto
- uid: Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm
  commentId: T:Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm
  parent: Org.BouncyCastle.Crypto.Tls
  name: SignatureAndHashAlgorithm
  nameWithType: SignatureAndHashAlgorithm
  fullName: Org.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature
  name: VerifyRawSignature
  nameWithType: TlsSigner.VerifyRawSignature
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.VerifyRawSignature
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner
  name: CreateSigner
  nameWithType: TlsSigner.CreateSigner
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateSigner
- uid: Org.BouncyCastle.Crypto.ISigner
  commentId: T:Org.BouncyCastle.Crypto.ISigner
  parent: Org.BouncyCastle.Crypto
  name: ISigner
  nameWithType: ISigner
  fullName: Org.BouncyCastle.Crypto.ISigner
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer
  name: CreateVerifyer
  nameWithType: TlsSigner.CreateVerifyer
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.CreateVerifyer
- uid: Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey*
  commentId: Overload:Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey
  name: IsValidPublicKey
  nameWithType: TlsSigner.IsValidPublicKey
  fullName: Org.BouncyCastle.Crypto.Tls.TlsSigner.IsValidPublicKey
